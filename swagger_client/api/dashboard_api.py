# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_dashboards(self, **kwargs):  # noqa: E501
        """get_all_dashboards  # noqa: E501

        Gets user and organization shared dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_dashboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dashboard1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_dashboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_dashboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_dashboards_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_dashboards  # noqa: E501

        Gets user and organization shared dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_dashboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dashboard1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_dashboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dashboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dashboard1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_hierarchies(self, **kwargs):  # noqa: E501
        """get_all_hierarchies  # noqa: E501

        Returns context hierarchy for the dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_hierarchies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ContextHierarchy1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_hierarchies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_hierarchies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_hierarchies_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_hierarchies  # noqa: E501

        Returns context hierarchy for the dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_hierarchies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ContextHierarchy1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_hierarchies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/context-hierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContextHierarchy1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_widgets(self, **kwargs):  # noqa: E501
        """get_all_widgets  # noqa: E501

        Gets all widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_widgets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: dashboard_id
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_widgets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_widgets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_widgets_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_widgets  # noqa: E501

        Gets all widgets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_widgets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int dashboard_id: dashboard_id
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_widgets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dashboard_id' in params:
            query_params.append(('dashboard_id', params['dashboard_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/widgets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_accreditation_status_get(self, **kwargs):  # noqa: E501
        """metrics_accreditation_status_get  # noqa: E501

        Gets the accreditation status metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_accreditation_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_accreditation_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_accreditation_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_accreditation_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_accreditation_status_get  # noqa: E501

        Gets the accreditation status metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_accreditation_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_accreditation_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/accreditation-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_authorization_status_get(self, **kwargs):  # noqa: E501
        """metrics_authorization_status_get  # noqa: E501

        Gets the authorization status metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_authorization_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_authorization_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_authorization_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_authorization_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_authorization_status_get  # noqa: E501

        Gets the authorization status metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_authorization_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_authorization_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/authorization-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_construction_history_get(self, **kwargs):  # noqa: E501
        """metrics_construction_history_get  # noqa: E501

        Gets the construction history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_construction_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_construction_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_construction_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_construction_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_construction_history_get  # noqa: E501

        Gets the construction history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_construction_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_construction_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/construction-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_inspection_history_get(self, **kwargs):  # noqa: E501
        """metrics_inspection_history_get  # noqa: E501

        Gets the inspection history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_inspection_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param str _as: return items as.  e.g. ?as=Routine
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_inspection_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_inspection_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_inspection_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_inspection_history_get  # noqa: E501

        Gets the inspection history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_inspection_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param str _as: return items as.  e.g. ?as=Routine
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', '_as', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_inspection_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if '_as' in params:
            query_params.append(('as', params['_as']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/inspection-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_inspection_rating_get(self, **kwargs):  # noqa: E501
        """metrics_inspection_rating_get  # noqa: E501

        Gets the inspection rating metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_inspection_rating_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param str _as: return items as.  e.g. ?as=Routine
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_inspection_rating_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_inspection_rating_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_inspection_rating_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_inspection_rating_get  # noqa: E501

        Gets the inspection rating metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_inspection_rating_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param str _as: return items as.  e.g. ?as=Routine
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', '_as', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_inspection_rating_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if '_as' in params:
            query_params.append(('as', params['_as']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/inspection-rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_lsac_history_get(self, **kwargs):  # noqa: E501
        """metrics_lsac_history_get  # noqa: E501

        Gets the LSAC history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_lsac_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_lsac_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_lsac_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_lsac_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_lsac_history_get  # noqa: E501

        Gets the LSAC history metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_lsac_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_lsac_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/lsac-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_lsac_rating_get(self, **kwargs):  # noqa: E501
        """metrics_lsac_rating_get  # noqa: E501

        Gets the LSAC Rating count metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_lsac_rating_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :param bool is_system: Limit dashboard to only systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_lsac_rating_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_lsac_rating_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_lsac_rating_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_lsac_rating_get  # noqa: E501

        Gets the LSAC Rating count metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_lsac_rating_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :param bool is_system: Limit dashboard to only systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace', 'is_system']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_lsac_rating_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501
        if 'is_system' in params:
            query_params.append(('isSystem', params['is_system']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/lsac-rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics_risk_characteristics_get(self, **kwargs):  # noqa: E501
        """metrics_risk_characteristics_get  # noqa: E501

        Gets the risk characteristics metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_risk_characteristics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_risk_characteristics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.metrics_risk_characteristics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def metrics_risk_characteristics_get_with_http_info(self, **kwargs):  # noqa: E501
        """metrics_risk_characteristics_get  # noqa: E501

        Gets the risk characteristics metrics for a given context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_risk_characteristics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _in: @state:illinois|missouri
        :param bool is_usace: Limit dashboard to only USACE systems
        :return: list[AdvancedField1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_in', 'is_usace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics_risk_characteristics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_in' in params:
            query_params.append(('in', params['_in']))  # noqa: E501
        if 'is_usace' in params:
            query_params.append(('isUsace', params['is_usace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metrics/risk-characteristics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdvancedField1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
