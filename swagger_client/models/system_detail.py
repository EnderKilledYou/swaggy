# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'leveed_id': 'float',
        'comments': 'str',
        'closure_structure_miles': 'float',
        'closure_structure_count': 'int',
        'levee_length_in_miles': 'float',
        'floodwall_length_in_miles': 'float',
        'geometry': 'object',
        'location': 'str',
        'inspection_rating_name': 'str',
        'inspection_rating_description': 'str',
        'inspection_date': 'datetime',
        'inspection_result': 'str',
        'is_federal': 'float',
        'waterway': 'str',
        'median_birthday': 'float',
        'sponsors': 'str',
        'states': 'list[str]',
        'counties': 'list[str]',
        'segment_count': 'int',
        'financial_risk': 'float',
        'people_at_risk': 'int',
        'structures_at_risk': 'int',
        'nonproj': 'int',
        'division_names': 'str',
        'district_names': 'str',
        'fema_region_names': 'str',
        'congressional_districts': 'str',
        'min_overtop_event': 'str',
        'egress_number': 'float',
        'warning_indicator': 'float',
        'huc4_names': 'str',
        'project_description': 'str',
        'length_in_miles': 'float',
        'prior_ids': 'str',
        'consequence_tif_link': 'str',
        'risk_characterization_summary': 'str',
        'rip_status_id': 'int',
        'lsac_rating_id': 'int',
        'lsac_rating_name': 'str',
        'is_usace': 'int',
        'overtopping_ace_id': 'int',
        'aep_actual_value': 'int',
        'additional_information': 'str',
        'what_can_you_do': 'str',
        'system_type_id': 'int',
        'system_type': 'str',
        'system_subtype_id': 'int',
        'system_subtype': 'str',
        'community_county_contact': 'str',
        'communities': 'list[str]',
        'authorizations': 'list[str]',
        'rip_statuses': 'list[str]',
        'districts': 'list[str]',
        'divisions': 'list[str]',
        'fema_regions': 'list[str]',
        'organizations': 'list[str]',
        'segments': 'list[str]',
        'data_stewards': 'list[str]',
        'cong_dists': 'list[str]',
        'huc8s': 'list[str]',
        'risk_action': 'str',
        'risk_coordination': 'str',
        'risk_om_action': 'str',
        'risk_improvements': 'str',
        'risk_actions_unfinished': 'str',
        'risk_other_taken': 'str',
        'risk_rms_actions': 'str',
        'risk_performance': 'str',
        'risk_conditions': 'str',
        'risk_factors_changes': 'str',
        'risk_new_factors': 'str',
        'risk_others_change': 'str',
        'uncertainty_source': 'str',
        'uncertainty_description': 'str',
        'fema_info': 'str',
        'responsible_organization_id': 'int',
        'evacuation_plan_id': 'int',
        'levee_condition_performance': 'str',
        'potential_lost_benefits': 'str',
        'data_change_rationale': 'str',
        'levee_reviewed_id': 'int',
        'levee_reviewed_date': 'datetime',
        'rp_eligibility_id': 'int',
        'rp_eligibility_date': 'datetime',
        'swif_id': 'int',
        'program_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'leveed_id': 'leveedId',
        'comments': 'comments',
        'closure_structure_miles': 'closureStructureMiles',
        'closure_structure_count': 'closureStructureCount',
        'levee_length_in_miles': 'leveeLengthInMiles',
        'floodwall_length_in_miles': 'floodwallLengthInMiles',
        'geometry': 'geometry',
        'location': 'location',
        'inspection_rating_name': 'inspectionRatingName',
        'inspection_rating_description': 'inspectionRatingDescription',
        'inspection_date': 'inspectionDate',
        'inspection_result': 'inspectionResult',
        'is_federal': 'isFederal',
        'waterway': 'waterway',
        'median_birthday': 'medianBirthday',
        'sponsors': 'sponsors',
        'states': 'states',
        'counties': 'counties',
        'segment_count': 'segmentCount',
        'financial_risk': 'financialRisk',
        'people_at_risk': 'peopleAtRisk',
        'structures_at_risk': 'structuresAtRisk',
        'nonproj': 'nonproj',
        'division_names': 'divisionNames',
        'district_names': 'districtNames',
        'fema_region_names': 'femaRegionNames',
        'congressional_districts': 'congressionalDistricts',
        'min_overtop_event': 'minOvertopEvent',
        'egress_number': 'egressNumber',
        'warning_indicator': 'warningIndicator',
        'huc4_names': 'huc4Names',
        'project_description': 'projectDescription',
        'length_in_miles': 'lengthInMiles',
        'prior_ids': 'priorIds',
        'consequence_tif_link': 'consequenceTifLink',
        'risk_characterization_summary': 'riskCharacterizationSummary',
        'rip_status_id': 'ripStatusId',
        'lsac_rating_id': 'lsacRatingId',
        'lsac_rating_name': 'lsacRatingName',
        'is_usace': 'isUsace',
        'overtopping_ace_id': 'overtoppingAceId',
        'aep_actual_value': 'aepActualValue',
        'additional_information': 'additionalInformation',
        'what_can_you_do': 'whatCanYouDo',
        'system_type_id': 'systemTypeId',
        'system_type': 'systemType',
        'system_subtype_id': 'systemSubtypeId',
        'system_subtype': 'systemSubtype',
        'community_county_contact': 'communityCountyContact',
        'communities': 'communities',
        'authorizations': 'authorizations',
        'rip_statuses': 'ripStatuses',
        'districts': 'districts',
        'divisions': 'divisions',
        'fema_regions': 'femaRegions',
        'organizations': 'organizations',
        'segments': 'segments',
        'data_stewards': 'dataStewards',
        'cong_dists': 'congDists',
        'huc8s': 'huc8s',
        'risk_action': 'riskAction',
        'risk_coordination': 'riskCoordination',
        'risk_om_action': 'riskOmAction',
        'risk_improvements': 'riskImprovements',
        'risk_actions_unfinished': 'riskActionsUnfinished',
        'risk_other_taken': 'riskOtherTaken',
        'risk_rms_actions': 'riskRmsActions',
        'risk_performance': 'riskPerformance',
        'risk_conditions': 'riskConditions',
        'risk_factors_changes': 'riskFactorsChanges',
        'risk_new_factors': 'riskNewFactors',
        'risk_others_change': 'riskOthersChange',
        'uncertainty_source': 'uncertaintySource',
        'uncertainty_description': 'uncertaintyDescription',
        'fema_info': 'femaInfo',
        'responsible_organization_id': 'responsibleOrganizationId',
        'evacuation_plan_id': 'evacuationPlanId',
        'levee_condition_performance': 'leveeConditionPerformance',
        'potential_lost_benefits': 'potentialLostBenefits',
        'data_change_rationale': 'dataChangeRationale',
        'levee_reviewed_id': 'leveeReviewedId',
        'levee_reviewed_date': 'leveeReviewedDate',
        'rp_eligibility_id': 'rpEligibilityId',
        'rp_eligibility_date': 'rpEligibilityDate',
        'swif_id': 'swifId',
        'program_code': 'programCode'
    }

    def __init__(self, id=None, name=None, leveed_id=None, comments=None, closure_structure_miles=None, closure_structure_count=None, levee_length_in_miles=None, floodwall_length_in_miles=None, geometry=None, location=None, inspection_rating_name=None, inspection_rating_description=None, inspection_date=None, inspection_result=None, is_federal=None, waterway=None, median_birthday=None, sponsors=None, states=None, counties=None, segment_count=None, financial_risk=None, people_at_risk=None, structures_at_risk=None, nonproj=None, division_names=None, district_names=None, fema_region_names=None, congressional_districts=None, min_overtop_event=None, egress_number=None, warning_indicator=None, huc4_names=None, project_description=None, length_in_miles=None, prior_ids=None, consequence_tif_link=None, risk_characterization_summary=None, rip_status_id=None, lsac_rating_id=None, lsac_rating_name=None, is_usace=None, overtopping_ace_id=None, aep_actual_value=None, additional_information=None, what_can_you_do=None, system_type_id=None, system_type=None, system_subtype_id=None, system_subtype=None, community_county_contact=None, communities=None, authorizations=None, rip_statuses=None, districts=None, divisions=None, fema_regions=None, organizations=None, segments=None, data_stewards=None, cong_dists=None, huc8s=None, risk_action=None, risk_coordination=None, risk_om_action=None, risk_improvements=None, risk_actions_unfinished=None, risk_other_taken=None, risk_rms_actions=None, risk_performance=None, risk_conditions=None, risk_factors_changes=None, risk_new_factors=None, risk_others_change=None, uncertainty_source=None, uncertainty_description=None, fema_info=None, responsible_organization_id=None, evacuation_plan_id=None, levee_condition_performance=None, potential_lost_benefits=None, data_change_rationale=None, levee_reviewed_id=None, levee_reviewed_date=None, rp_eligibility_id=None, rp_eligibility_date=None, swif_id=None, program_code=None, _configuration=None):  # noqa: E501
        """SystemDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._leveed_id = None
        self._comments = None
        self._closure_structure_miles = None
        self._closure_structure_count = None
        self._levee_length_in_miles = None
        self._floodwall_length_in_miles = None
        self._geometry = None
        self._location = None
        self._inspection_rating_name = None
        self._inspection_rating_description = None
        self._inspection_date = None
        self._inspection_result = None
        self._is_federal = None
        self._waterway = None
        self._median_birthday = None
        self._sponsors = None
        self._states = None
        self._counties = None
        self._segment_count = None
        self._financial_risk = None
        self._people_at_risk = None
        self._structures_at_risk = None
        self._nonproj = None
        self._division_names = None
        self._district_names = None
        self._fema_region_names = None
        self._congressional_districts = None
        self._min_overtop_event = None
        self._egress_number = None
        self._warning_indicator = None
        self._huc4_names = None
        self._project_description = None
        self._length_in_miles = None
        self._prior_ids = None
        self._consequence_tif_link = None
        self._risk_characterization_summary = None
        self._rip_status_id = None
        self._lsac_rating_id = None
        self._lsac_rating_name = None
        self._is_usace = None
        self._overtopping_ace_id = None
        self._aep_actual_value = None
        self._additional_information = None
        self._what_can_you_do = None
        self._system_type_id = None
        self._system_type = None
        self._system_subtype_id = None
        self._system_subtype = None
        self._community_county_contact = None
        self._communities = None
        self._authorizations = None
        self._rip_statuses = None
        self._districts = None
        self._divisions = None
        self._fema_regions = None
        self._organizations = None
        self._segments = None
        self._data_stewards = None
        self._cong_dists = None
        self._huc8s = None
        self._risk_action = None
        self._risk_coordination = None
        self._risk_om_action = None
        self._risk_improvements = None
        self._risk_actions_unfinished = None
        self._risk_other_taken = None
        self._risk_rms_actions = None
        self._risk_performance = None
        self._risk_conditions = None
        self._risk_factors_changes = None
        self._risk_new_factors = None
        self._risk_others_change = None
        self._uncertainty_source = None
        self._uncertainty_description = None
        self._fema_info = None
        self._responsible_organization_id = None
        self._evacuation_plan_id = None
        self._levee_condition_performance = None
        self._potential_lost_benefits = None
        self._data_change_rationale = None
        self._levee_reviewed_id = None
        self._levee_reviewed_date = None
        self._rp_eligibility_id = None
        self._rp_eligibility_date = None
        self._swif_id = None
        self._program_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if leveed_id is not None:
            self.leveed_id = leveed_id
        if comments is not None:
            self.comments = comments
        if closure_structure_miles is not None:
            self.closure_structure_miles = closure_structure_miles
        if closure_structure_count is not None:
            self.closure_structure_count = closure_structure_count
        if levee_length_in_miles is not None:
            self.levee_length_in_miles = levee_length_in_miles
        if floodwall_length_in_miles is not None:
            self.floodwall_length_in_miles = floodwall_length_in_miles
        if geometry is not None:
            self.geometry = geometry
        if location is not None:
            self.location = location
        if inspection_rating_name is not None:
            self.inspection_rating_name = inspection_rating_name
        if inspection_rating_description is not None:
            self.inspection_rating_description = inspection_rating_description
        if inspection_date is not None:
            self.inspection_date = inspection_date
        if inspection_result is not None:
            self.inspection_result = inspection_result
        if is_federal is not None:
            self.is_federal = is_federal
        if waterway is not None:
            self.waterway = waterway
        if median_birthday is not None:
            self.median_birthday = median_birthday
        if sponsors is not None:
            self.sponsors = sponsors
        if states is not None:
            self.states = states
        if counties is not None:
            self.counties = counties
        if segment_count is not None:
            self.segment_count = segment_count
        if financial_risk is not None:
            self.financial_risk = financial_risk
        if people_at_risk is not None:
            self.people_at_risk = people_at_risk
        if structures_at_risk is not None:
            self.structures_at_risk = structures_at_risk
        if nonproj is not None:
            self.nonproj = nonproj
        if division_names is not None:
            self.division_names = division_names
        if district_names is not None:
            self.district_names = district_names
        if fema_region_names is not None:
            self.fema_region_names = fema_region_names
        if congressional_districts is not None:
            self.congressional_districts = congressional_districts
        if min_overtop_event is not None:
            self.min_overtop_event = min_overtop_event
        if egress_number is not None:
            self.egress_number = egress_number
        if warning_indicator is not None:
            self.warning_indicator = warning_indicator
        if huc4_names is not None:
            self.huc4_names = huc4_names
        if project_description is not None:
            self.project_description = project_description
        if length_in_miles is not None:
            self.length_in_miles = length_in_miles
        if prior_ids is not None:
            self.prior_ids = prior_ids
        if consequence_tif_link is not None:
            self.consequence_tif_link = consequence_tif_link
        if risk_characterization_summary is not None:
            self.risk_characterization_summary = risk_characterization_summary
        if rip_status_id is not None:
            self.rip_status_id = rip_status_id
        if lsac_rating_id is not None:
            self.lsac_rating_id = lsac_rating_id
        if lsac_rating_name is not None:
            self.lsac_rating_name = lsac_rating_name
        if is_usace is not None:
            self.is_usace = is_usace
        if overtopping_ace_id is not None:
            self.overtopping_ace_id = overtopping_ace_id
        if aep_actual_value is not None:
            self.aep_actual_value = aep_actual_value
        if additional_information is not None:
            self.additional_information = additional_information
        if what_can_you_do is not None:
            self.what_can_you_do = what_can_you_do
        if system_type_id is not None:
            self.system_type_id = system_type_id
        if system_type is not None:
            self.system_type = system_type
        if system_subtype_id is not None:
            self.system_subtype_id = system_subtype_id
        if system_subtype is not None:
            self.system_subtype = system_subtype
        if community_county_contact is not None:
            self.community_county_contact = community_county_contact
        if communities is not None:
            self.communities = communities
        if authorizations is not None:
            self.authorizations = authorizations
        if rip_statuses is not None:
            self.rip_statuses = rip_statuses
        if districts is not None:
            self.districts = districts
        if divisions is not None:
            self.divisions = divisions
        if fema_regions is not None:
            self.fema_regions = fema_regions
        if organizations is not None:
            self.organizations = organizations
        if segments is not None:
            self.segments = segments
        if data_stewards is not None:
            self.data_stewards = data_stewards
        if cong_dists is not None:
            self.cong_dists = cong_dists
        if huc8s is not None:
            self.huc8s = huc8s
        if risk_action is not None:
            self.risk_action = risk_action
        if risk_coordination is not None:
            self.risk_coordination = risk_coordination
        if risk_om_action is not None:
            self.risk_om_action = risk_om_action
        if risk_improvements is not None:
            self.risk_improvements = risk_improvements
        if risk_actions_unfinished is not None:
            self.risk_actions_unfinished = risk_actions_unfinished
        if risk_other_taken is not None:
            self.risk_other_taken = risk_other_taken
        if risk_rms_actions is not None:
            self.risk_rms_actions = risk_rms_actions
        if risk_performance is not None:
            self.risk_performance = risk_performance
        if risk_conditions is not None:
            self.risk_conditions = risk_conditions
        if risk_factors_changes is not None:
            self.risk_factors_changes = risk_factors_changes
        if risk_new_factors is not None:
            self.risk_new_factors = risk_new_factors
        if risk_others_change is not None:
            self.risk_others_change = risk_others_change
        if uncertainty_source is not None:
            self.uncertainty_source = uncertainty_source
        if uncertainty_description is not None:
            self.uncertainty_description = uncertainty_description
        if fema_info is not None:
            self.fema_info = fema_info
        if responsible_organization_id is not None:
            self.responsible_organization_id = responsible_organization_id
        if evacuation_plan_id is not None:
            self.evacuation_plan_id = evacuation_plan_id
        if levee_condition_performance is not None:
            self.levee_condition_performance = levee_condition_performance
        if potential_lost_benefits is not None:
            self.potential_lost_benefits = potential_lost_benefits
        if data_change_rationale is not None:
            self.data_change_rationale = data_change_rationale
        if levee_reviewed_id is not None:
            self.levee_reviewed_id = levee_reviewed_id
        if levee_reviewed_date is not None:
            self.levee_reviewed_date = levee_reviewed_date
        if rp_eligibility_id is not None:
            self.rp_eligibility_id = rp_eligibility_id
        if rp_eligibility_date is not None:
            self.rp_eligibility_date = rp_eligibility_date
        if swif_id is not None:
            self.swif_id = swif_id
        if program_code is not None:
            self.program_code = program_code

    @property
    def id(self):
        """Gets the id of this SystemDetail.  # noqa: E501


        :return: The id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemDetail.


        :param id: The id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SystemDetail.  # noqa: E501


        :return: The name of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemDetail.


        :param name: The name of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def leveed_id(self):
        """Gets the leveed_id of this SystemDetail.  # noqa: E501


        :return: The leveed_id of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._leveed_id

    @leveed_id.setter
    def leveed_id(self, leveed_id):
        """Sets the leveed_id of this SystemDetail.


        :param leveed_id: The leveed_id of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._leveed_id = leveed_id

    @property
    def comments(self):
        """Gets the comments of this SystemDetail.  # noqa: E501


        :return: The comments of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SystemDetail.


        :param comments: The comments of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def closure_structure_miles(self):
        """Gets the closure_structure_miles of this SystemDetail.  # noqa: E501


        :return: The closure_structure_miles of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._closure_structure_miles

    @closure_structure_miles.setter
    def closure_structure_miles(self, closure_structure_miles):
        """Sets the closure_structure_miles of this SystemDetail.


        :param closure_structure_miles: The closure_structure_miles of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._closure_structure_miles = closure_structure_miles

    @property
    def closure_structure_count(self):
        """Gets the closure_structure_count of this SystemDetail.  # noqa: E501


        :return: The closure_structure_count of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._closure_structure_count

    @closure_structure_count.setter
    def closure_structure_count(self, closure_structure_count):
        """Sets the closure_structure_count of this SystemDetail.


        :param closure_structure_count: The closure_structure_count of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._closure_structure_count = closure_structure_count

    @property
    def levee_length_in_miles(self):
        """Gets the levee_length_in_miles of this SystemDetail.  # noqa: E501


        :return: The levee_length_in_miles of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._levee_length_in_miles

    @levee_length_in_miles.setter
    def levee_length_in_miles(self, levee_length_in_miles):
        """Sets the levee_length_in_miles of this SystemDetail.


        :param levee_length_in_miles: The levee_length_in_miles of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._levee_length_in_miles = levee_length_in_miles

    @property
    def floodwall_length_in_miles(self):
        """Gets the floodwall_length_in_miles of this SystemDetail.  # noqa: E501


        :return: The floodwall_length_in_miles of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._floodwall_length_in_miles

    @floodwall_length_in_miles.setter
    def floodwall_length_in_miles(self, floodwall_length_in_miles):
        """Sets the floodwall_length_in_miles of this SystemDetail.


        :param floodwall_length_in_miles: The floodwall_length_in_miles of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._floodwall_length_in_miles = floodwall_length_in_miles

    @property
    def geometry(self):
        """Gets the geometry of this SystemDetail.  # noqa: E501


        :return: The geometry of this SystemDetail.  # noqa: E501
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this SystemDetail.


        :param geometry: The geometry of this SystemDetail.  # noqa: E501
        :type: object
        """

        self._geometry = geometry

    @property
    def location(self):
        """Gets the location of this SystemDetail.  # noqa: E501


        :return: The location of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SystemDetail.


        :param location: The location of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def inspection_rating_name(self):
        """Gets the inspection_rating_name of this SystemDetail.  # noqa: E501


        :return: The inspection_rating_name of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._inspection_rating_name

    @inspection_rating_name.setter
    def inspection_rating_name(self, inspection_rating_name):
        """Sets the inspection_rating_name of this SystemDetail.


        :param inspection_rating_name: The inspection_rating_name of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._inspection_rating_name = inspection_rating_name

    @property
    def inspection_rating_description(self):
        """Gets the inspection_rating_description of this SystemDetail.  # noqa: E501


        :return: The inspection_rating_description of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._inspection_rating_description

    @inspection_rating_description.setter
    def inspection_rating_description(self, inspection_rating_description):
        """Sets the inspection_rating_description of this SystemDetail.


        :param inspection_rating_description: The inspection_rating_description of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._inspection_rating_description = inspection_rating_description

    @property
    def inspection_date(self):
        """Gets the inspection_date of this SystemDetail.  # noqa: E501


        :return: The inspection_date of this SystemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date

    @inspection_date.setter
    def inspection_date(self, inspection_date):
        """Sets the inspection_date of this SystemDetail.


        :param inspection_date: The inspection_date of this SystemDetail.  # noqa: E501
        :type: datetime
        """

        self._inspection_date = inspection_date

    @property
    def inspection_result(self):
        """Gets the inspection_result of this SystemDetail.  # noqa: E501


        :return: The inspection_result of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._inspection_result

    @inspection_result.setter
    def inspection_result(self, inspection_result):
        """Sets the inspection_result of this SystemDetail.


        :param inspection_result: The inspection_result of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._inspection_result = inspection_result

    @property
    def is_federal(self):
        """Gets the is_federal of this SystemDetail.  # noqa: E501


        :return: The is_federal of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._is_federal

    @is_federal.setter
    def is_federal(self, is_federal):
        """Sets the is_federal of this SystemDetail.


        :param is_federal: The is_federal of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._is_federal = is_federal

    @property
    def waterway(self):
        """Gets the waterway of this SystemDetail.  # noqa: E501


        :return: The waterway of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._waterway

    @waterway.setter
    def waterway(self, waterway):
        """Sets the waterway of this SystemDetail.


        :param waterway: The waterway of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._waterway = waterway

    @property
    def median_birthday(self):
        """Gets the median_birthday of this SystemDetail.  # noqa: E501


        :return: The median_birthday of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._median_birthday

    @median_birthday.setter
    def median_birthday(self, median_birthday):
        """Sets the median_birthday of this SystemDetail.


        :param median_birthday: The median_birthday of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._median_birthday = median_birthday

    @property
    def sponsors(self):
        """Gets the sponsors of this SystemDetail.  # noqa: E501


        :return: The sponsors of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this SystemDetail.


        :param sponsors: The sponsors of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._sponsors = sponsors

    @property
    def states(self):
        """Gets the states of this SystemDetail.  # noqa: E501


        :return: The states of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this SystemDetail.


        :param states: The states of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._states = states

    @property
    def counties(self):
        """Gets the counties of this SystemDetail.  # noqa: E501


        :return: The counties of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._counties

    @counties.setter
    def counties(self, counties):
        """Sets the counties of this SystemDetail.


        :param counties: The counties of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._counties = counties

    @property
    def segment_count(self):
        """Gets the segment_count of this SystemDetail.  # noqa: E501


        :return: The segment_count of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._segment_count

    @segment_count.setter
    def segment_count(self, segment_count):
        """Sets the segment_count of this SystemDetail.


        :param segment_count: The segment_count of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._segment_count = segment_count

    @property
    def financial_risk(self):
        """Gets the financial_risk of this SystemDetail.  # noqa: E501


        :return: The financial_risk of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._financial_risk

    @financial_risk.setter
    def financial_risk(self, financial_risk):
        """Sets the financial_risk of this SystemDetail.


        :param financial_risk: The financial_risk of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._financial_risk = financial_risk

    @property
    def people_at_risk(self):
        """Gets the people_at_risk of this SystemDetail.  # noqa: E501


        :return: The people_at_risk of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._people_at_risk

    @people_at_risk.setter
    def people_at_risk(self, people_at_risk):
        """Sets the people_at_risk of this SystemDetail.


        :param people_at_risk: The people_at_risk of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._people_at_risk = people_at_risk

    @property
    def structures_at_risk(self):
        """Gets the structures_at_risk of this SystemDetail.  # noqa: E501


        :return: The structures_at_risk of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._structures_at_risk

    @structures_at_risk.setter
    def structures_at_risk(self, structures_at_risk):
        """Sets the structures_at_risk of this SystemDetail.


        :param structures_at_risk: The structures_at_risk of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._structures_at_risk = structures_at_risk

    @property
    def nonproj(self):
        """Gets the nonproj of this SystemDetail.  # noqa: E501


        :return: The nonproj of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._nonproj

    @nonproj.setter
    def nonproj(self, nonproj):
        """Sets the nonproj of this SystemDetail.


        :param nonproj: The nonproj of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._nonproj = nonproj

    @property
    def division_names(self):
        """Gets the division_names of this SystemDetail.  # noqa: E501


        :return: The division_names of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._division_names

    @division_names.setter
    def division_names(self, division_names):
        """Sets the division_names of this SystemDetail.


        :param division_names: The division_names of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._division_names = division_names

    @property
    def district_names(self):
        """Gets the district_names of this SystemDetail.  # noqa: E501


        :return: The district_names of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._district_names

    @district_names.setter
    def district_names(self, district_names):
        """Sets the district_names of this SystemDetail.


        :param district_names: The district_names of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._district_names = district_names

    @property
    def fema_region_names(self):
        """Gets the fema_region_names of this SystemDetail.  # noqa: E501


        :return: The fema_region_names of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._fema_region_names

    @fema_region_names.setter
    def fema_region_names(self, fema_region_names):
        """Sets the fema_region_names of this SystemDetail.


        :param fema_region_names: The fema_region_names of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._fema_region_names = fema_region_names

    @property
    def congressional_districts(self):
        """Gets the congressional_districts of this SystemDetail.  # noqa: E501


        :return: The congressional_districts of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._congressional_districts

    @congressional_districts.setter
    def congressional_districts(self, congressional_districts):
        """Sets the congressional_districts of this SystemDetail.


        :param congressional_districts: The congressional_districts of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._congressional_districts = congressional_districts

    @property
    def min_overtop_event(self):
        """Gets the min_overtop_event of this SystemDetail.  # noqa: E501


        :return: The min_overtop_event of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._min_overtop_event

    @min_overtop_event.setter
    def min_overtop_event(self, min_overtop_event):
        """Sets the min_overtop_event of this SystemDetail.


        :param min_overtop_event: The min_overtop_event of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._min_overtop_event = min_overtop_event

    @property
    def egress_number(self):
        """Gets the egress_number of this SystemDetail.  # noqa: E501


        :return: The egress_number of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._egress_number

    @egress_number.setter
    def egress_number(self, egress_number):
        """Sets the egress_number of this SystemDetail.


        :param egress_number: The egress_number of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._egress_number = egress_number

    @property
    def warning_indicator(self):
        """Gets the warning_indicator of this SystemDetail.  # noqa: E501


        :return: The warning_indicator of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._warning_indicator

    @warning_indicator.setter
    def warning_indicator(self, warning_indicator):
        """Sets the warning_indicator of this SystemDetail.


        :param warning_indicator: The warning_indicator of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._warning_indicator = warning_indicator

    @property
    def huc4_names(self):
        """Gets the huc4_names of this SystemDetail.  # noqa: E501


        :return: The huc4_names of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._huc4_names

    @huc4_names.setter
    def huc4_names(self, huc4_names):
        """Sets the huc4_names of this SystemDetail.


        :param huc4_names: The huc4_names of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._huc4_names = huc4_names

    @property
    def project_description(self):
        """Gets the project_description of this SystemDetail.  # noqa: E501


        :return: The project_description of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._project_description

    @project_description.setter
    def project_description(self, project_description):
        """Sets the project_description of this SystemDetail.


        :param project_description: The project_description of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._project_description = project_description

    @property
    def length_in_miles(self):
        """Gets the length_in_miles of this SystemDetail.  # noqa: E501


        :return: The length_in_miles of this SystemDetail.  # noqa: E501
        :rtype: float
        """
        return self._length_in_miles

    @length_in_miles.setter
    def length_in_miles(self, length_in_miles):
        """Sets the length_in_miles of this SystemDetail.


        :param length_in_miles: The length_in_miles of this SystemDetail.  # noqa: E501
        :type: float
        """

        self._length_in_miles = length_in_miles

    @property
    def prior_ids(self):
        """Gets the prior_ids of this SystemDetail.  # noqa: E501


        :return: The prior_ids of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._prior_ids

    @prior_ids.setter
    def prior_ids(self, prior_ids):
        """Sets the prior_ids of this SystemDetail.


        :param prior_ids: The prior_ids of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                prior_ids is not None and len(prior_ids) > 200):
            raise ValueError("Invalid value for `prior_ids`, length must be less than or equal to `200`")  # noqa: E501

        self._prior_ids = prior_ids

    @property
    def consequence_tif_link(self):
        """Gets the consequence_tif_link of this SystemDetail.  # noqa: E501


        :return: The consequence_tif_link of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._consequence_tif_link

    @consequence_tif_link.setter
    def consequence_tif_link(self, consequence_tif_link):
        """Sets the consequence_tif_link of this SystemDetail.


        :param consequence_tif_link: The consequence_tif_link of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._consequence_tif_link = consequence_tif_link

    @property
    def risk_characterization_summary(self):
        """Gets the risk_characterization_summary of this SystemDetail.  # noqa: E501


        :return: The risk_characterization_summary of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_characterization_summary

    @risk_characterization_summary.setter
    def risk_characterization_summary(self, risk_characterization_summary):
        """Sets the risk_characterization_summary of this SystemDetail.


        :param risk_characterization_summary: The risk_characterization_summary of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._risk_characterization_summary = risk_characterization_summary

    @property
    def rip_status_id(self):
        """Gets the rip_status_id of this SystemDetail.  # noqa: E501


        :return: The rip_status_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._rip_status_id

    @rip_status_id.setter
    def rip_status_id(self, rip_status_id):
        """Sets the rip_status_id of this SystemDetail.


        :param rip_status_id: The rip_status_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._rip_status_id = rip_status_id

    @property
    def lsac_rating_id(self):
        """Gets the lsac_rating_id of this SystemDetail.  # noqa: E501


        :return: The lsac_rating_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._lsac_rating_id

    @lsac_rating_id.setter
    def lsac_rating_id(self, lsac_rating_id):
        """Sets the lsac_rating_id of this SystemDetail.


        :param lsac_rating_id: The lsac_rating_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._lsac_rating_id = lsac_rating_id

    @property
    def lsac_rating_name(self):
        """Gets the lsac_rating_name of this SystemDetail.  # noqa: E501


        :return: The lsac_rating_name of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._lsac_rating_name

    @lsac_rating_name.setter
    def lsac_rating_name(self, lsac_rating_name):
        """Sets the lsac_rating_name of this SystemDetail.


        :param lsac_rating_name: The lsac_rating_name of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._lsac_rating_name = lsac_rating_name

    @property
    def is_usace(self):
        """Gets the is_usace of this SystemDetail.  # noqa: E501


        :return: The is_usace of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._is_usace

    @is_usace.setter
    def is_usace(self, is_usace):
        """Sets the is_usace of this SystemDetail.


        :param is_usace: The is_usace of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._is_usace = is_usace

    @property
    def overtopping_ace_id(self):
        """Gets the overtopping_ace_id of this SystemDetail.  # noqa: E501


        :return: The overtopping_ace_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._overtopping_ace_id

    @overtopping_ace_id.setter
    def overtopping_ace_id(self, overtopping_ace_id):
        """Sets the overtopping_ace_id of this SystemDetail.


        :param overtopping_ace_id: The overtopping_ace_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._overtopping_ace_id = overtopping_ace_id

    @property
    def aep_actual_value(self):
        """Gets the aep_actual_value of this SystemDetail.  # noqa: E501


        :return: The aep_actual_value of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._aep_actual_value

    @aep_actual_value.setter
    def aep_actual_value(self, aep_actual_value):
        """Sets the aep_actual_value of this SystemDetail.


        :param aep_actual_value: The aep_actual_value of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._aep_actual_value = aep_actual_value

    @property
    def additional_information(self):
        """Gets the additional_information of this SystemDetail.  # noqa: E501


        :return: The additional_information of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this SystemDetail.


        :param additional_information: The additional_information of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def what_can_you_do(self):
        """Gets the what_can_you_do of this SystemDetail.  # noqa: E501


        :return: The what_can_you_do of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._what_can_you_do

    @what_can_you_do.setter
    def what_can_you_do(self, what_can_you_do):
        """Sets the what_can_you_do of this SystemDetail.


        :param what_can_you_do: The what_can_you_do of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._what_can_you_do = what_can_you_do

    @property
    def system_type_id(self):
        """Gets the system_type_id of this SystemDetail.  # noqa: E501


        :return: The system_type_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._system_type_id

    @system_type_id.setter
    def system_type_id(self, system_type_id):
        """Sets the system_type_id of this SystemDetail.


        :param system_type_id: The system_type_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._system_type_id = system_type_id

    @property
    def system_type(self):
        """Gets the system_type of this SystemDetail.  # noqa: E501


        :return: The system_type of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._system_type

    @system_type.setter
    def system_type(self, system_type):
        """Sets the system_type of this SystemDetail.


        :param system_type: The system_type of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._system_type = system_type

    @property
    def system_subtype_id(self):
        """Gets the system_subtype_id of this SystemDetail.  # noqa: E501


        :return: The system_subtype_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._system_subtype_id

    @system_subtype_id.setter
    def system_subtype_id(self, system_subtype_id):
        """Sets the system_subtype_id of this SystemDetail.


        :param system_subtype_id: The system_subtype_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._system_subtype_id = system_subtype_id

    @property
    def system_subtype(self):
        """Gets the system_subtype of this SystemDetail.  # noqa: E501


        :return: The system_subtype of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._system_subtype

    @system_subtype.setter
    def system_subtype(self, system_subtype):
        """Sets the system_subtype of this SystemDetail.


        :param system_subtype: The system_subtype of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._system_subtype = system_subtype

    @property
    def community_county_contact(self):
        """Gets the community_county_contact of this SystemDetail.  # noqa: E501


        :return: The community_county_contact of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._community_county_contact

    @community_county_contact.setter
    def community_county_contact(self, community_county_contact):
        """Sets the community_county_contact of this SystemDetail.


        :param community_county_contact: The community_county_contact of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._community_county_contact = community_county_contact

    @property
    def communities(self):
        """Gets the communities of this SystemDetail.  # noqa: E501


        :return: The communities of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this SystemDetail.


        :param communities: The communities of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._communities = communities

    @property
    def authorizations(self):
        """Gets the authorizations of this SystemDetail.  # noqa: E501


        :return: The authorizations of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this SystemDetail.


        :param authorizations: The authorizations of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._authorizations = authorizations

    @property
    def rip_statuses(self):
        """Gets the rip_statuses of this SystemDetail.  # noqa: E501


        :return: The rip_statuses of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._rip_statuses

    @rip_statuses.setter
    def rip_statuses(self, rip_statuses):
        """Sets the rip_statuses of this SystemDetail.


        :param rip_statuses: The rip_statuses of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._rip_statuses = rip_statuses

    @property
    def districts(self):
        """Gets the districts of this SystemDetail.  # noqa: E501


        :return: The districts of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._districts

    @districts.setter
    def districts(self, districts):
        """Sets the districts of this SystemDetail.


        :param districts: The districts of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._districts = districts

    @property
    def divisions(self):
        """Gets the divisions of this SystemDetail.  # noqa: E501


        :return: The divisions of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this SystemDetail.


        :param divisions: The divisions of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._divisions = divisions

    @property
    def fema_regions(self):
        """Gets the fema_regions of this SystemDetail.  # noqa: E501


        :return: The fema_regions of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._fema_regions

    @fema_regions.setter
    def fema_regions(self, fema_regions):
        """Sets the fema_regions of this SystemDetail.


        :param fema_regions: The fema_regions of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._fema_regions = fema_regions

    @property
    def organizations(self):
        """Gets the organizations of this SystemDetail.  # noqa: E501


        :return: The organizations of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this SystemDetail.


        :param organizations: The organizations of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    @property
    def segments(self):
        """Gets the segments of this SystemDetail.  # noqa: E501


        :return: The segments of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this SystemDetail.


        :param segments: The segments of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._segments = segments

    @property
    def data_stewards(self):
        """Gets the data_stewards of this SystemDetail.  # noqa: E501


        :return: The data_stewards of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_stewards

    @data_stewards.setter
    def data_stewards(self, data_stewards):
        """Sets the data_stewards of this SystemDetail.


        :param data_stewards: The data_stewards of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._data_stewards = data_stewards

    @property
    def cong_dists(self):
        """Gets the cong_dists of this SystemDetail.  # noqa: E501


        :return: The cong_dists of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._cong_dists

    @cong_dists.setter
    def cong_dists(self, cong_dists):
        """Sets the cong_dists of this SystemDetail.


        :param cong_dists: The cong_dists of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._cong_dists = cong_dists

    @property
    def huc8s(self):
        """Gets the huc8s of this SystemDetail.  # noqa: E501


        :return: The huc8s of this SystemDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._huc8s

    @huc8s.setter
    def huc8s(self, huc8s):
        """Sets the huc8s of this SystemDetail.


        :param huc8s: The huc8s of this SystemDetail.  # noqa: E501
        :type: list[str]
        """

        self._huc8s = huc8s

    @property
    def risk_action(self):
        """Gets the risk_action of this SystemDetail.  # noqa: E501


        :return: The risk_action of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_action

    @risk_action.setter
    def risk_action(self, risk_action):
        """Sets the risk_action of this SystemDetail.


        :param risk_action: The risk_action of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_action is not None and len(risk_action) > 4000):
            raise ValueError("Invalid value for `risk_action`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_action = risk_action

    @property
    def risk_coordination(self):
        """Gets the risk_coordination of this SystemDetail.  # noqa: E501


        :return: The risk_coordination of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_coordination

    @risk_coordination.setter
    def risk_coordination(self, risk_coordination):
        """Sets the risk_coordination of this SystemDetail.


        :param risk_coordination: The risk_coordination of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_coordination is not None and len(risk_coordination) > 4000):
            raise ValueError("Invalid value for `risk_coordination`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_coordination = risk_coordination

    @property
    def risk_om_action(self):
        """Gets the risk_om_action of this SystemDetail.  # noqa: E501


        :return: The risk_om_action of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_om_action

    @risk_om_action.setter
    def risk_om_action(self, risk_om_action):
        """Sets the risk_om_action of this SystemDetail.


        :param risk_om_action: The risk_om_action of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_om_action is not None and len(risk_om_action) > 4000):
            raise ValueError("Invalid value for `risk_om_action`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_om_action = risk_om_action

    @property
    def risk_improvements(self):
        """Gets the risk_improvements of this SystemDetail.  # noqa: E501


        :return: The risk_improvements of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_improvements

    @risk_improvements.setter
    def risk_improvements(self, risk_improvements):
        """Sets the risk_improvements of this SystemDetail.


        :param risk_improvements: The risk_improvements of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_improvements is not None and len(risk_improvements) > 4000):
            raise ValueError("Invalid value for `risk_improvements`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_improvements = risk_improvements

    @property
    def risk_actions_unfinished(self):
        """Gets the risk_actions_unfinished of this SystemDetail.  # noqa: E501


        :return: The risk_actions_unfinished of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_actions_unfinished

    @risk_actions_unfinished.setter
    def risk_actions_unfinished(self, risk_actions_unfinished):
        """Sets the risk_actions_unfinished of this SystemDetail.


        :param risk_actions_unfinished: The risk_actions_unfinished of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_actions_unfinished is not None and len(risk_actions_unfinished) > 4000):
            raise ValueError("Invalid value for `risk_actions_unfinished`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_actions_unfinished = risk_actions_unfinished

    @property
    def risk_other_taken(self):
        """Gets the risk_other_taken of this SystemDetail.  # noqa: E501


        :return: The risk_other_taken of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_other_taken

    @risk_other_taken.setter
    def risk_other_taken(self, risk_other_taken):
        """Sets the risk_other_taken of this SystemDetail.


        :param risk_other_taken: The risk_other_taken of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_other_taken is not None and len(risk_other_taken) > 4000):
            raise ValueError("Invalid value for `risk_other_taken`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_other_taken = risk_other_taken

    @property
    def risk_rms_actions(self):
        """Gets the risk_rms_actions of this SystemDetail.  # noqa: E501


        :return: The risk_rms_actions of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_rms_actions

    @risk_rms_actions.setter
    def risk_rms_actions(self, risk_rms_actions):
        """Sets the risk_rms_actions of this SystemDetail.


        :param risk_rms_actions: The risk_rms_actions of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_rms_actions is not None and len(risk_rms_actions) > 4000):
            raise ValueError("Invalid value for `risk_rms_actions`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_rms_actions = risk_rms_actions

    @property
    def risk_performance(self):
        """Gets the risk_performance of this SystemDetail.  # noqa: E501


        :return: The risk_performance of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_performance

    @risk_performance.setter
    def risk_performance(self, risk_performance):
        """Sets the risk_performance of this SystemDetail.


        :param risk_performance: The risk_performance of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_performance is not None and len(risk_performance) > 4000):
            raise ValueError("Invalid value for `risk_performance`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_performance = risk_performance

    @property
    def risk_conditions(self):
        """Gets the risk_conditions of this SystemDetail.  # noqa: E501


        :return: The risk_conditions of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_conditions

    @risk_conditions.setter
    def risk_conditions(self, risk_conditions):
        """Sets the risk_conditions of this SystemDetail.


        :param risk_conditions: The risk_conditions of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_conditions is not None and len(risk_conditions) > 4000):
            raise ValueError("Invalid value for `risk_conditions`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_conditions = risk_conditions

    @property
    def risk_factors_changes(self):
        """Gets the risk_factors_changes of this SystemDetail.  # noqa: E501


        :return: The risk_factors_changes of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_factors_changes

    @risk_factors_changes.setter
    def risk_factors_changes(self, risk_factors_changes):
        """Sets the risk_factors_changes of this SystemDetail.


        :param risk_factors_changes: The risk_factors_changes of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_factors_changes is not None and len(risk_factors_changes) > 4000):
            raise ValueError("Invalid value for `risk_factors_changes`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_factors_changes = risk_factors_changes

    @property
    def risk_new_factors(self):
        """Gets the risk_new_factors of this SystemDetail.  # noqa: E501


        :return: The risk_new_factors of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_new_factors

    @risk_new_factors.setter
    def risk_new_factors(self, risk_new_factors):
        """Sets the risk_new_factors of this SystemDetail.


        :param risk_new_factors: The risk_new_factors of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_new_factors is not None and len(risk_new_factors) > 4000):
            raise ValueError("Invalid value for `risk_new_factors`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_new_factors = risk_new_factors

    @property
    def risk_others_change(self):
        """Gets the risk_others_change of this SystemDetail.  # noqa: E501


        :return: The risk_others_change of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._risk_others_change

    @risk_others_change.setter
    def risk_others_change(self, risk_others_change):
        """Sets the risk_others_change of this SystemDetail.


        :param risk_others_change: The risk_others_change of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_others_change is not None and len(risk_others_change) > 4000):
            raise ValueError("Invalid value for `risk_others_change`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_others_change = risk_others_change

    @property
    def uncertainty_source(self):
        """Gets the uncertainty_source of this SystemDetail.  # noqa: E501


        :return: The uncertainty_source of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_source

    @uncertainty_source.setter
    def uncertainty_source(self, uncertainty_source):
        """Sets the uncertainty_source of this SystemDetail.


        :param uncertainty_source: The uncertainty_source of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uncertainty_source is not None and len(uncertainty_source) > 4000):
            raise ValueError("Invalid value for `uncertainty_source`, length must be less than or equal to `4000`")  # noqa: E501

        self._uncertainty_source = uncertainty_source

    @property
    def uncertainty_description(self):
        """Gets the uncertainty_description of this SystemDetail.  # noqa: E501


        :return: The uncertainty_description of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_description

    @uncertainty_description.setter
    def uncertainty_description(self, uncertainty_description):
        """Sets the uncertainty_description of this SystemDetail.


        :param uncertainty_description: The uncertainty_description of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uncertainty_description is not None and len(uncertainty_description) > 4000):
            raise ValueError("Invalid value for `uncertainty_description`, length must be less than or equal to `4000`")  # noqa: E501

        self._uncertainty_description = uncertainty_description

    @property
    def fema_info(self):
        """Gets the fema_info of this SystemDetail.  # noqa: E501


        :return: The fema_info of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._fema_info

    @fema_info.setter
    def fema_info(self, fema_info):
        """Sets the fema_info of this SystemDetail.


        :param fema_info: The fema_info of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                fema_info is not None and len(fema_info) > 4000):
            raise ValueError("Invalid value for `fema_info`, length must be less than or equal to `4000`")  # noqa: E501

        self._fema_info = fema_info

    @property
    def responsible_organization_id(self):
        """Gets the responsible_organization_id of this SystemDetail.  # noqa: E501


        :return: The responsible_organization_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._responsible_organization_id

    @responsible_organization_id.setter
    def responsible_organization_id(self, responsible_organization_id):
        """Sets the responsible_organization_id of this SystemDetail.


        :param responsible_organization_id: The responsible_organization_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._responsible_organization_id = responsible_organization_id

    @property
    def evacuation_plan_id(self):
        """Gets the evacuation_plan_id of this SystemDetail.  # noqa: E501


        :return: The evacuation_plan_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._evacuation_plan_id

    @evacuation_plan_id.setter
    def evacuation_plan_id(self, evacuation_plan_id):
        """Sets the evacuation_plan_id of this SystemDetail.


        :param evacuation_plan_id: The evacuation_plan_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._evacuation_plan_id = evacuation_plan_id

    @property
    def levee_condition_performance(self):
        """Gets the levee_condition_performance of this SystemDetail.  # noqa: E501


        :return: The levee_condition_performance of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._levee_condition_performance

    @levee_condition_performance.setter
    def levee_condition_performance(self, levee_condition_performance):
        """Sets the levee_condition_performance of this SystemDetail.


        :param levee_condition_performance: The levee_condition_performance of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._levee_condition_performance = levee_condition_performance

    @property
    def potential_lost_benefits(self):
        """Gets the potential_lost_benefits of this SystemDetail.  # noqa: E501


        :return: The potential_lost_benefits of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._potential_lost_benefits

    @potential_lost_benefits.setter
    def potential_lost_benefits(self, potential_lost_benefits):
        """Sets the potential_lost_benefits of this SystemDetail.


        :param potential_lost_benefits: The potential_lost_benefits of this SystemDetail.  # noqa: E501
        :type: str
        """

        self._potential_lost_benefits = potential_lost_benefits

    @property
    def data_change_rationale(self):
        """Gets the data_change_rationale of this SystemDetail.  # noqa: E501


        :return: The data_change_rationale of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._data_change_rationale

    @data_change_rationale.setter
    def data_change_rationale(self, data_change_rationale):
        """Sets the data_change_rationale of this SystemDetail.


        :param data_change_rationale: The data_change_rationale of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                data_change_rationale is not None and len(data_change_rationale) > 40000):
            raise ValueError("Invalid value for `data_change_rationale`, length must be less than or equal to `40000`")  # noqa: E501

        self._data_change_rationale = data_change_rationale

    @property
    def levee_reviewed_id(self):
        """Gets the levee_reviewed_id of this SystemDetail.  # noqa: E501


        :return: The levee_reviewed_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._levee_reviewed_id

    @levee_reviewed_id.setter
    def levee_reviewed_id(self, levee_reviewed_id):
        """Sets the levee_reviewed_id of this SystemDetail.


        :param levee_reviewed_id: The levee_reviewed_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._levee_reviewed_id = levee_reviewed_id

    @property
    def levee_reviewed_date(self):
        """Gets the levee_reviewed_date of this SystemDetail.  # noqa: E501


        :return: The levee_reviewed_date of this SystemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._levee_reviewed_date

    @levee_reviewed_date.setter
    def levee_reviewed_date(self, levee_reviewed_date):
        """Sets the levee_reviewed_date of this SystemDetail.


        :param levee_reviewed_date: The levee_reviewed_date of this SystemDetail.  # noqa: E501
        :type: datetime
        """

        self._levee_reviewed_date = levee_reviewed_date

    @property
    def rp_eligibility_id(self):
        """Gets the rp_eligibility_id of this SystemDetail.  # noqa: E501


        :return: The rp_eligibility_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._rp_eligibility_id

    @rp_eligibility_id.setter
    def rp_eligibility_id(self, rp_eligibility_id):
        """Sets the rp_eligibility_id of this SystemDetail.


        :param rp_eligibility_id: The rp_eligibility_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._rp_eligibility_id = rp_eligibility_id

    @property
    def rp_eligibility_date(self):
        """Gets the rp_eligibility_date of this SystemDetail.  # noqa: E501


        :return: The rp_eligibility_date of this SystemDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._rp_eligibility_date

    @rp_eligibility_date.setter
    def rp_eligibility_date(self, rp_eligibility_date):
        """Sets the rp_eligibility_date of this SystemDetail.


        :param rp_eligibility_date: The rp_eligibility_date of this SystemDetail.  # noqa: E501
        :type: datetime
        """

        self._rp_eligibility_date = rp_eligibility_date

    @property
    def swif_id(self):
        """Gets the swif_id of this SystemDetail.  # noqa: E501


        :return: The swif_id of this SystemDetail.  # noqa: E501
        :rtype: int
        """
        return self._swif_id

    @swif_id.setter
    def swif_id(self, swif_id):
        """Sets the swif_id of this SystemDetail.


        :param swif_id: The swif_id of this SystemDetail.  # noqa: E501
        :type: int
        """

        self._swif_id = swif_id

    @property
    def program_code(self):
        """Gets the program_code of this SystemDetail.  # noqa: E501


        :return: The program_code of this SystemDetail.  # noqa: E501
        :rtype: str
        """
        return self._program_code

    @program_code.setter
    def program_code(self, program_code):
        """Sets the program_code of this SystemDetail.


        :param program_code: The program_code of this SystemDetail.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                program_code is not None and len(program_code) > 40000):
            raise ValueError("Invalid value for `program_code`, length must be less than or equal to `40000`")  # noqa: E501

        self._program_code = program_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemDetail):
            return True

        return self.to_dict() != other.to_dict()
