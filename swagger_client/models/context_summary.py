# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContextSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_miles': 'int',
        'federal_miles': 'int',
        'nonfederal_miles': 'int',
        'total_number_of_systems': 'int',
        'federal_number_of_systems': 'int',
        'nonfederal_number_of_systems': 'int'
    }

    attribute_map = {
        'total_miles': 'totalMiles',
        'federal_miles': 'federalMiles',
        'nonfederal_miles': 'nonfederalMiles',
        'total_number_of_systems': 'totalNumberOfSystems',
        'federal_number_of_systems': 'federalNumberOfSystems',
        'nonfederal_number_of_systems': 'nonfederalNumberOfSystems'
    }

    def __init__(self, total_miles=None, federal_miles=None, nonfederal_miles=None, total_number_of_systems=None, federal_number_of_systems=None, nonfederal_number_of_systems=None, _configuration=None):  # noqa: E501
        """ContextSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_miles = None
        self._federal_miles = None
        self._nonfederal_miles = None
        self._total_number_of_systems = None
        self._federal_number_of_systems = None
        self._nonfederal_number_of_systems = None
        self.discriminator = None

        if total_miles is not None:
            self.total_miles = total_miles
        if federal_miles is not None:
            self.federal_miles = federal_miles
        if nonfederal_miles is not None:
            self.nonfederal_miles = nonfederal_miles
        if total_number_of_systems is not None:
            self.total_number_of_systems = total_number_of_systems
        if federal_number_of_systems is not None:
            self.federal_number_of_systems = federal_number_of_systems
        if nonfederal_number_of_systems is not None:
            self.nonfederal_number_of_systems = nonfederal_number_of_systems

    @property
    def total_miles(self):
        """Gets the total_miles of this ContextSummary.  # noqa: E501


        :return: The total_miles of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_miles

    @total_miles.setter
    def total_miles(self, total_miles):
        """Sets the total_miles of this ContextSummary.


        :param total_miles: The total_miles of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._total_miles = total_miles

    @property
    def federal_miles(self):
        """Gets the federal_miles of this ContextSummary.  # noqa: E501


        :return: The federal_miles of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._federal_miles

    @federal_miles.setter
    def federal_miles(self, federal_miles):
        """Sets the federal_miles of this ContextSummary.


        :param federal_miles: The federal_miles of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._federal_miles = federal_miles

    @property
    def nonfederal_miles(self):
        """Gets the nonfederal_miles of this ContextSummary.  # noqa: E501


        :return: The nonfederal_miles of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._nonfederal_miles

    @nonfederal_miles.setter
    def nonfederal_miles(self, nonfederal_miles):
        """Sets the nonfederal_miles of this ContextSummary.


        :param nonfederal_miles: The nonfederal_miles of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._nonfederal_miles = nonfederal_miles

    @property
    def total_number_of_systems(self):
        """Gets the total_number_of_systems of this ContextSummary.  # noqa: E501


        :return: The total_number_of_systems of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_systems

    @total_number_of_systems.setter
    def total_number_of_systems(self, total_number_of_systems):
        """Sets the total_number_of_systems of this ContextSummary.


        :param total_number_of_systems: The total_number_of_systems of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._total_number_of_systems = total_number_of_systems

    @property
    def federal_number_of_systems(self):
        """Gets the federal_number_of_systems of this ContextSummary.  # noqa: E501


        :return: The federal_number_of_systems of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._federal_number_of_systems

    @federal_number_of_systems.setter
    def federal_number_of_systems(self, federal_number_of_systems):
        """Sets the federal_number_of_systems of this ContextSummary.


        :param federal_number_of_systems: The federal_number_of_systems of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._federal_number_of_systems = federal_number_of_systems

    @property
    def nonfederal_number_of_systems(self):
        """Gets the nonfederal_number_of_systems of this ContextSummary.  # noqa: E501


        :return: The nonfederal_number_of_systems of this ContextSummary.  # noqa: E501
        :rtype: int
        """
        return self._nonfederal_number_of_systems

    @nonfederal_number_of_systems.setter
    def nonfederal_number_of_systems(self, nonfederal_number_of_systems):
        """Sets the nonfederal_number_of_systems of this ContextSummary.


        :param nonfederal_number_of_systems: The nonfederal_number_of_systems of this ContextSummary.  # noqa: E501
        :type: int
        """

        self._nonfederal_number_of_systems = nonfederal_number_of_systems

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContextSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContextSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContextSummary):
            return True

        return self.to_dict() != other.to_dict()
