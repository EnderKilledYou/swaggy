# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Segment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fema_community': 'list[str]',
        'usace_district': 'list[str]',
        'usace_division': 'list[str]',
        'fema_region': 'list[int]',
        'congdist': 'list[str]',
        'aiannh': 'list[str]',
        'floodwall_miles': 'float',
        'miles': 'float',
        'non_proj_miles': 'float',
        'is_usace': 'int',
        'levee_miles': 'float',
        'bpot_count': 'float',
        'breach_count': 'int',
        'overtop_breach_count': 'int',
        'overtop_count': 'int',
        'performance_event_count': 'int',
        'steward_org_ids': 'list[int]',
        'station_point_count': 'int'
    }

    attribute_map = {
        'fema_community': 'femaCommunity',
        'usace_district': 'usaceDistrict',
        'usace_division': 'usaceDivision',
        'fema_region': 'femaRegion',
        'congdist': 'congdist',
        'aiannh': 'aiannh',
        'floodwall_miles': 'floodwallMiles',
        'miles': 'miles',
        'non_proj_miles': 'nonProjMiles',
        'is_usace': 'isUsace',
        'levee_miles': 'leveeMiles',
        'bpot_count': 'bpotCount',
        'breach_count': 'breachCount',
        'overtop_breach_count': 'overtopBreachCount',
        'overtop_count': 'overtopCount',
        'performance_event_count': 'performanceEventCount',
        'steward_org_ids': 'stewardOrgIds',
        'station_point_count': 'stationPointCount'
    }

    def __init__(self, fema_community=None, usace_district=None, usace_division=None, fema_region=None, congdist=None, aiannh=None, floodwall_miles=None, miles=None, non_proj_miles=None, is_usace=None, levee_miles=None, bpot_count=None, breach_count=None, overtop_breach_count=None, overtop_count=None, performance_event_count=None, steward_org_ids=None, station_point_count=None, _configuration=None):  # noqa: E501
        """Segment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fema_community = None
        self._usace_district = None
        self._usace_division = None
        self._fema_region = None
        self._congdist = None
        self._aiannh = None
        self._floodwall_miles = None
        self._miles = None
        self._non_proj_miles = None
        self._is_usace = None
        self._levee_miles = None
        self._bpot_count = None
        self._breach_count = None
        self._overtop_breach_count = None
        self._overtop_count = None
        self._performance_event_count = None
        self._steward_org_ids = None
        self._station_point_count = None
        self.discriminator = None

        if fema_community is not None:
            self.fema_community = fema_community
        if usace_district is not None:
            self.usace_district = usace_district
        if usace_division is not None:
            self.usace_division = usace_division
        if fema_region is not None:
            self.fema_region = fema_region
        if congdist is not None:
            self.congdist = congdist
        if aiannh is not None:
            self.aiannh = aiannh
        if floodwall_miles is not None:
            self.floodwall_miles = floodwall_miles
        if miles is not None:
            self.miles = miles
        if non_proj_miles is not None:
            self.non_proj_miles = non_proj_miles
        if is_usace is not None:
            self.is_usace = is_usace
        if levee_miles is not None:
            self.levee_miles = levee_miles
        if bpot_count is not None:
            self.bpot_count = bpot_count
        if breach_count is not None:
            self.breach_count = breach_count
        if overtop_breach_count is not None:
            self.overtop_breach_count = overtop_breach_count
        if overtop_count is not None:
            self.overtop_count = overtop_count
        if performance_event_count is not None:
            self.performance_event_count = performance_event_count
        if steward_org_ids is not None:
            self.steward_org_ids = steward_org_ids
        if station_point_count is not None:
            self.station_point_count = station_point_count

    @property
    def fema_community(self):
        """Gets the fema_community of this Segment.  # noqa: E501


        :return: The fema_community of this Segment.  # noqa: E501
        :rtype: list[str]
        """
        return self._fema_community

    @fema_community.setter
    def fema_community(self, fema_community):
        """Sets the fema_community of this Segment.


        :param fema_community: The fema_community of this Segment.  # noqa: E501
        :type: list[str]
        """

        self._fema_community = fema_community

    @property
    def usace_district(self):
        """Gets the usace_district of this Segment.  # noqa: E501


        :return: The usace_district of this Segment.  # noqa: E501
        :rtype: list[str]
        """
        return self._usace_district

    @usace_district.setter
    def usace_district(self, usace_district):
        """Sets the usace_district of this Segment.


        :param usace_district: The usace_district of this Segment.  # noqa: E501
        :type: list[str]
        """

        self._usace_district = usace_district

    @property
    def usace_division(self):
        """Gets the usace_division of this Segment.  # noqa: E501


        :return: The usace_division of this Segment.  # noqa: E501
        :rtype: list[str]
        """
        return self._usace_division

    @usace_division.setter
    def usace_division(self, usace_division):
        """Sets the usace_division of this Segment.


        :param usace_division: The usace_division of this Segment.  # noqa: E501
        :type: list[str]
        """

        self._usace_division = usace_division

    @property
    def fema_region(self):
        """Gets the fema_region of this Segment.  # noqa: E501


        :return: The fema_region of this Segment.  # noqa: E501
        :rtype: list[int]
        """
        return self._fema_region

    @fema_region.setter
    def fema_region(self, fema_region):
        """Sets the fema_region of this Segment.


        :param fema_region: The fema_region of this Segment.  # noqa: E501
        :type: list[int]
        """

        self._fema_region = fema_region

    @property
    def congdist(self):
        """Gets the congdist of this Segment.  # noqa: E501


        :return: The congdist of this Segment.  # noqa: E501
        :rtype: list[str]
        """
        return self._congdist

    @congdist.setter
    def congdist(self, congdist):
        """Sets the congdist of this Segment.


        :param congdist: The congdist of this Segment.  # noqa: E501
        :type: list[str]
        """

        self._congdist = congdist

    @property
    def aiannh(self):
        """Gets the aiannh of this Segment.  # noqa: E501


        :return: The aiannh of this Segment.  # noqa: E501
        :rtype: list[str]
        """
        return self._aiannh

    @aiannh.setter
    def aiannh(self, aiannh):
        """Sets the aiannh of this Segment.


        :param aiannh: The aiannh of this Segment.  # noqa: E501
        :type: list[str]
        """

        self._aiannh = aiannh

    @property
    def floodwall_miles(self):
        """Gets the floodwall_miles of this Segment.  # noqa: E501


        :return: The floodwall_miles of this Segment.  # noqa: E501
        :rtype: float
        """
        return self._floodwall_miles

    @floodwall_miles.setter
    def floodwall_miles(self, floodwall_miles):
        """Sets the floodwall_miles of this Segment.


        :param floodwall_miles: The floodwall_miles of this Segment.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                floodwall_miles is not None and floodwall_miles > 99999999999.9999):  # noqa: E501
            raise ValueError("Invalid value for `floodwall_miles`, must be a value less than or equal to `99999999999.9999`")  # noqa: E501

        self._floodwall_miles = floodwall_miles

    @property
    def miles(self):
        """Gets the miles of this Segment.  # noqa: E501


        :return: The miles of this Segment.  # noqa: E501
        :rtype: float
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this Segment.


        :param miles: The miles of this Segment.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                miles is not None and miles > 99999999999.9999):  # noqa: E501
            raise ValueError("Invalid value for `miles`, must be a value less than or equal to `99999999999.9999`")  # noqa: E501

        self._miles = miles

    @property
    def non_proj_miles(self):
        """Gets the non_proj_miles of this Segment.  # noqa: E501


        :return: The non_proj_miles of this Segment.  # noqa: E501
        :rtype: float
        """
        return self._non_proj_miles

    @non_proj_miles.setter
    def non_proj_miles(self, non_proj_miles):
        """Sets the non_proj_miles of this Segment.


        :param non_proj_miles: The non_proj_miles of this Segment.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                non_proj_miles is not None and non_proj_miles > 99999999999.9999):  # noqa: E501
            raise ValueError("Invalid value for `non_proj_miles`, must be a value less than or equal to `99999999999.9999`")  # noqa: E501

        self._non_proj_miles = non_proj_miles

    @property
    def is_usace(self):
        """Gets the is_usace of this Segment.  # noqa: E501


        :return: The is_usace of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._is_usace

    @is_usace.setter
    def is_usace(self, is_usace):
        """Sets the is_usace of this Segment.


        :param is_usace: The is_usace of this Segment.  # noqa: E501
        :type: int
        """

        self._is_usace = is_usace

    @property
    def levee_miles(self):
        """Gets the levee_miles of this Segment.  # noqa: E501


        :return: The levee_miles of this Segment.  # noqa: E501
        :rtype: float
        """
        return self._levee_miles

    @levee_miles.setter
    def levee_miles(self, levee_miles):
        """Sets the levee_miles of this Segment.


        :param levee_miles: The levee_miles of this Segment.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                levee_miles is not None and levee_miles > 99999999999.9999):  # noqa: E501
            raise ValueError("Invalid value for `levee_miles`, must be a value less than or equal to `99999999999.9999`")  # noqa: E501

        self._levee_miles = levee_miles

    @property
    def bpot_count(self):
        """Gets the bpot_count of this Segment.  # noqa: E501


        :return: The bpot_count of this Segment.  # noqa: E501
        :rtype: float
        """
        return self._bpot_count

    @bpot_count.setter
    def bpot_count(self, bpot_count):
        """Sets the bpot_count of this Segment.


        :param bpot_count: The bpot_count of this Segment.  # noqa: E501
        :type: float
        """

        self._bpot_count = bpot_count

    @property
    def breach_count(self):
        """Gets the breach_count of this Segment.  # noqa: E501


        :return: The breach_count of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._breach_count

    @breach_count.setter
    def breach_count(self, breach_count):
        """Sets the breach_count of this Segment.


        :param breach_count: The breach_count of this Segment.  # noqa: E501
        :type: int
        """

        self._breach_count = breach_count

    @property
    def overtop_breach_count(self):
        """Gets the overtop_breach_count of this Segment.  # noqa: E501


        :return: The overtop_breach_count of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._overtop_breach_count

    @overtop_breach_count.setter
    def overtop_breach_count(self, overtop_breach_count):
        """Sets the overtop_breach_count of this Segment.


        :param overtop_breach_count: The overtop_breach_count of this Segment.  # noqa: E501
        :type: int
        """

        self._overtop_breach_count = overtop_breach_count

    @property
    def overtop_count(self):
        """Gets the overtop_count of this Segment.  # noqa: E501


        :return: The overtop_count of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._overtop_count

    @overtop_count.setter
    def overtop_count(self, overtop_count):
        """Sets the overtop_count of this Segment.


        :param overtop_count: The overtop_count of this Segment.  # noqa: E501
        :type: int
        """

        self._overtop_count = overtop_count

    @property
    def performance_event_count(self):
        """Gets the performance_event_count of this Segment.  # noqa: E501


        :return: The performance_event_count of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._performance_event_count

    @performance_event_count.setter
    def performance_event_count(self, performance_event_count):
        """Sets the performance_event_count of this Segment.


        :param performance_event_count: The performance_event_count of this Segment.  # noqa: E501
        :type: int
        """

        self._performance_event_count = performance_event_count

    @property
    def steward_org_ids(self):
        """Gets the steward_org_ids of this Segment.  # noqa: E501


        :return: The steward_org_ids of this Segment.  # noqa: E501
        :rtype: list[int]
        """
        return self._steward_org_ids

    @steward_org_ids.setter
    def steward_org_ids(self, steward_org_ids):
        """Sets the steward_org_ids of this Segment.


        :param steward_org_ids: The steward_org_ids of this Segment.  # noqa: E501
        :type: list[int]
        """

        self._steward_org_ids = steward_org_ids

    @property
    def station_point_count(self):
        """Gets the station_point_count of this Segment.  # noqa: E501


        :return: The station_point_count of this Segment.  # noqa: E501
        :rtype: int
        """
        return self._station_point_count

    @station_point_count.setter
    def station_point_count(self, station_point_count):
        """Sets the station_point_count of this Segment.


        :param station_point_count: The station_point_count of this Segment.  # noqa: E501
        :type: int
        """

        self._station_point_count = station_point_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Segment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Segment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Segment):
            return True

        return self.to_dict() != other.to_dict()
