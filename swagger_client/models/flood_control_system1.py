# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FloodControlSystem1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length_in_miles': 'float',
        'structures_at_risk': 'float',
        'financial_risk': 'float',
        'people_at_risk': 'float',
        'leveed_area_square_miles': 'float',
        'sponsor_type_ids': 'list[int]',
        'sponsor_role_ids': 'list[int]',
        'is_usace': 'int',
        'aiannh': 'list[str]',
        'steward_org_names': 'list[str]',
        'city_state': 'list[str]',
        'congdist': 'list[str]',
        'county_state': 'list[str]',
        'steward_org_ids': 'list[int]',
        'fema_community': 'list[str]',
        'fema_region': 'list[int]',
        'huc2': 'list[str]',
        'huc4': 'list[str]',
        'huc6': 'list[str]',
        'huc8': 'list[str]',
        'nation': 'list[str]',
        'state': 'list[str]',
        'usace_district': 'list[str]',
        'usace_division': 'list[str]',
        'zipcode': 'list[int]',
        'agency': 'list[str]',
        'risk_action': 'str',
        'risk_coordination': 'str',
        'risk_om_action': 'str',
        'risk_improvements': 'str',
        'risk_actions_unfinished': 'str',
        'risk_other_taken': 'str',
        'risk_rms_actions': 'str',
        'risk_performance': 'str',
        'risk_conditions': 'str',
        'risk_factors_changes': 'str',
        'risk_new_factors': 'str',
        'risk_others_change': 'str',
        'uncertainty_source': 'str',
        'uncertainty_description': 'str',
        'fema_info': 'str',
        'portfolio': 'list[str]',
        'location': 'str',
        'interested_agency_ids': 'list[str]',
        'evacuation_plan_id': 'int',
        'purpose_ids': 'list[int]',
        'primary_purpose_id': 'int',
        'authorization_category_id': 'int',
        'swif_id': 'int',
        'levee_reviewed_id': 'int'
    }

    attribute_map = {
        'length_in_miles': 'lengthInMiles',
        'structures_at_risk': 'structuresAtRisk',
        'financial_risk': 'financialRisk',
        'people_at_risk': 'peopleAtRisk',
        'leveed_area_square_miles': 'leveedAreaSquareMiles',
        'sponsor_type_ids': 'sponsorTypeIds',
        'sponsor_role_ids': 'sponsorRoleIds',
        'is_usace': 'isUsace',
        'aiannh': 'aiannh',
        'steward_org_names': 'stewardOrgNames',
        'city_state': 'cityState',
        'congdist': 'congdist',
        'county_state': 'countyState',
        'steward_org_ids': 'stewardOrgIds',
        'fema_community': 'femaCommunity',
        'fema_region': 'femaRegion',
        'huc2': 'huc2',
        'huc4': 'huc4',
        'huc6': 'huc6',
        'huc8': 'huc8',
        'nation': 'nation',
        'state': 'state',
        'usace_district': 'usaceDistrict',
        'usace_division': 'usaceDivision',
        'zipcode': 'zipcode',
        'agency': 'agency',
        'risk_action': 'riskAction',
        'risk_coordination': 'riskCoordination',
        'risk_om_action': 'riskOmAction',
        'risk_improvements': 'riskImprovements',
        'risk_actions_unfinished': 'riskActionsUnfinished',
        'risk_other_taken': 'riskOtherTaken',
        'risk_rms_actions': 'riskRmsActions',
        'risk_performance': 'riskPerformance',
        'risk_conditions': 'riskConditions',
        'risk_factors_changes': 'riskFactorsChanges',
        'risk_new_factors': 'riskNewFactors',
        'risk_others_change': 'riskOthersChange',
        'uncertainty_source': 'uncertaintySource',
        'uncertainty_description': 'uncertaintyDescription',
        'fema_info': 'femaInfo',
        'portfolio': 'portfolio',
        'location': 'location',
        'interested_agency_ids': 'interestedAgencyIds',
        'evacuation_plan_id': 'evacuationPlanId',
        'purpose_ids': 'purposeIds',
        'primary_purpose_id': 'primaryPurposeId',
        'authorization_category_id': 'authorizationCategoryId',
        'swif_id': 'swifId',
        'levee_reviewed_id': 'leveeReviewedId'
    }

    def __init__(self, length_in_miles=None, structures_at_risk=None, financial_risk=None, people_at_risk=None, leveed_area_square_miles=None, sponsor_type_ids=None, sponsor_role_ids=None, is_usace=None, aiannh=None, steward_org_names=None, city_state=None, congdist=None, county_state=None, steward_org_ids=None, fema_community=None, fema_region=None, huc2=None, huc4=None, huc6=None, huc8=None, nation=None, state=None, usace_district=None, usace_division=None, zipcode=None, agency=None, risk_action=None, risk_coordination=None, risk_om_action=None, risk_improvements=None, risk_actions_unfinished=None, risk_other_taken=None, risk_rms_actions=None, risk_performance=None, risk_conditions=None, risk_factors_changes=None, risk_new_factors=None, risk_others_change=None, uncertainty_source=None, uncertainty_description=None, fema_info=None, portfolio=None, location=None, interested_agency_ids=None, evacuation_plan_id=None, purpose_ids=None, primary_purpose_id=None, authorization_category_id=None, swif_id=None, levee_reviewed_id=None, _configuration=None):  # noqa: E501
        """FloodControlSystem1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._length_in_miles = None
        self._structures_at_risk = None
        self._financial_risk = None
        self._people_at_risk = None
        self._leveed_area_square_miles = None
        self._sponsor_type_ids = None
        self._sponsor_role_ids = None
        self._is_usace = None
        self._aiannh = None
        self._steward_org_names = None
        self._city_state = None
        self._congdist = None
        self._county_state = None
        self._steward_org_ids = None
        self._fema_community = None
        self._fema_region = None
        self._huc2 = None
        self._huc4 = None
        self._huc6 = None
        self._huc8 = None
        self._nation = None
        self._state = None
        self._usace_district = None
        self._usace_division = None
        self._zipcode = None
        self._agency = None
        self._risk_action = None
        self._risk_coordination = None
        self._risk_om_action = None
        self._risk_improvements = None
        self._risk_actions_unfinished = None
        self._risk_other_taken = None
        self._risk_rms_actions = None
        self._risk_performance = None
        self._risk_conditions = None
        self._risk_factors_changes = None
        self._risk_new_factors = None
        self._risk_others_change = None
        self._uncertainty_source = None
        self._uncertainty_description = None
        self._fema_info = None
        self._portfolio = None
        self._location = None
        self._interested_agency_ids = None
        self._evacuation_plan_id = None
        self._purpose_ids = None
        self._primary_purpose_id = None
        self._authorization_category_id = None
        self._swif_id = None
        self._levee_reviewed_id = None
        self.discriminator = None

        if length_in_miles is not None:
            self.length_in_miles = length_in_miles
        if structures_at_risk is not None:
            self.structures_at_risk = structures_at_risk
        if financial_risk is not None:
            self.financial_risk = financial_risk
        if people_at_risk is not None:
            self.people_at_risk = people_at_risk
        if leveed_area_square_miles is not None:
            self.leveed_area_square_miles = leveed_area_square_miles
        if sponsor_type_ids is not None:
            self.sponsor_type_ids = sponsor_type_ids
        if sponsor_role_ids is not None:
            self.sponsor_role_ids = sponsor_role_ids
        if is_usace is not None:
            self.is_usace = is_usace
        if aiannh is not None:
            self.aiannh = aiannh
        if steward_org_names is not None:
            self.steward_org_names = steward_org_names
        if city_state is not None:
            self.city_state = city_state
        if congdist is not None:
            self.congdist = congdist
        if county_state is not None:
            self.county_state = county_state
        if steward_org_ids is not None:
            self.steward_org_ids = steward_org_ids
        if fema_community is not None:
            self.fema_community = fema_community
        if fema_region is not None:
            self.fema_region = fema_region
        if huc2 is not None:
            self.huc2 = huc2
        if huc4 is not None:
            self.huc4 = huc4
        if huc6 is not None:
            self.huc6 = huc6
        if huc8 is not None:
            self.huc8 = huc8
        if nation is not None:
            self.nation = nation
        if state is not None:
            self.state = state
        if usace_district is not None:
            self.usace_district = usace_district
        if usace_division is not None:
            self.usace_division = usace_division
        if zipcode is not None:
            self.zipcode = zipcode
        if agency is not None:
            self.agency = agency
        if risk_action is not None:
            self.risk_action = risk_action
        if risk_coordination is not None:
            self.risk_coordination = risk_coordination
        if risk_om_action is not None:
            self.risk_om_action = risk_om_action
        if risk_improvements is not None:
            self.risk_improvements = risk_improvements
        if risk_actions_unfinished is not None:
            self.risk_actions_unfinished = risk_actions_unfinished
        if risk_other_taken is not None:
            self.risk_other_taken = risk_other_taken
        if risk_rms_actions is not None:
            self.risk_rms_actions = risk_rms_actions
        if risk_performance is not None:
            self.risk_performance = risk_performance
        if risk_conditions is not None:
            self.risk_conditions = risk_conditions
        if risk_factors_changes is not None:
            self.risk_factors_changes = risk_factors_changes
        if risk_new_factors is not None:
            self.risk_new_factors = risk_new_factors
        if risk_others_change is not None:
            self.risk_others_change = risk_others_change
        if uncertainty_source is not None:
            self.uncertainty_source = uncertainty_source
        if uncertainty_description is not None:
            self.uncertainty_description = uncertainty_description
        if fema_info is not None:
            self.fema_info = fema_info
        if portfolio is not None:
            self.portfolio = portfolio
        if location is not None:
            self.location = location
        if interested_agency_ids is not None:
            self.interested_agency_ids = interested_agency_ids
        if evacuation_plan_id is not None:
            self.evacuation_plan_id = evacuation_plan_id
        if purpose_ids is not None:
            self.purpose_ids = purpose_ids
        if primary_purpose_id is not None:
            self.primary_purpose_id = primary_purpose_id
        if authorization_category_id is not None:
            self.authorization_category_id = authorization_category_id
        if swif_id is not None:
            self.swif_id = swif_id
        if levee_reviewed_id is not None:
            self.levee_reviewed_id = levee_reviewed_id

    @property
    def length_in_miles(self):
        """Gets the length_in_miles of this FloodControlSystem1.  # noqa: E501


        :return: The length_in_miles of this FloodControlSystem1.  # noqa: E501
        :rtype: float
        """
        return self._length_in_miles

    @length_in_miles.setter
    def length_in_miles(self, length_in_miles):
        """Sets the length_in_miles of this FloodControlSystem1.


        :param length_in_miles: The length_in_miles of this FloodControlSystem1.  # noqa: E501
        :type: float
        """

        self._length_in_miles = length_in_miles

    @property
    def structures_at_risk(self):
        """Gets the structures_at_risk of this FloodControlSystem1.  # noqa: E501


        :return: The structures_at_risk of this FloodControlSystem1.  # noqa: E501
        :rtype: float
        """
        return self._structures_at_risk

    @structures_at_risk.setter
    def structures_at_risk(self, structures_at_risk):
        """Sets the structures_at_risk of this FloodControlSystem1.


        :param structures_at_risk: The structures_at_risk of this FloodControlSystem1.  # noqa: E501
        :type: float
        """

        self._structures_at_risk = structures_at_risk

    @property
    def financial_risk(self):
        """Gets the financial_risk of this FloodControlSystem1.  # noqa: E501


        :return: The financial_risk of this FloodControlSystem1.  # noqa: E501
        :rtype: float
        """
        return self._financial_risk

    @financial_risk.setter
    def financial_risk(self, financial_risk):
        """Sets the financial_risk of this FloodControlSystem1.


        :param financial_risk: The financial_risk of this FloodControlSystem1.  # noqa: E501
        :type: float
        """

        self._financial_risk = financial_risk

    @property
    def people_at_risk(self):
        """Gets the people_at_risk of this FloodControlSystem1.  # noqa: E501


        :return: The people_at_risk of this FloodControlSystem1.  # noqa: E501
        :rtype: float
        """
        return self._people_at_risk

    @people_at_risk.setter
    def people_at_risk(self, people_at_risk):
        """Sets the people_at_risk of this FloodControlSystem1.


        :param people_at_risk: The people_at_risk of this FloodControlSystem1.  # noqa: E501
        :type: float
        """

        self._people_at_risk = people_at_risk

    @property
    def leveed_area_square_miles(self):
        """Gets the leveed_area_square_miles of this FloodControlSystem1.  # noqa: E501


        :return: The leveed_area_square_miles of this FloodControlSystem1.  # noqa: E501
        :rtype: float
        """
        return self._leveed_area_square_miles

    @leveed_area_square_miles.setter
    def leveed_area_square_miles(self, leveed_area_square_miles):
        """Sets the leveed_area_square_miles of this FloodControlSystem1.


        :param leveed_area_square_miles: The leveed_area_square_miles of this FloodControlSystem1.  # noqa: E501
        :type: float
        """

        self._leveed_area_square_miles = leveed_area_square_miles

    @property
    def sponsor_type_ids(self):
        """Gets the sponsor_type_ids of this FloodControlSystem1.  # noqa: E501


        :return: The sponsor_type_ids of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._sponsor_type_ids

    @sponsor_type_ids.setter
    def sponsor_type_ids(self, sponsor_type_ids):
        """Sets the sponsor_type_ids of this FloodControlSystem1.


        :param sponsor_type_ids: The sponsor_type_ids of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._sponsor_type_ids = sponsor_type_ids

    @property
    def sponsor_role_ids(self):
        """Gets the sponsor_role_ids of this FloodControlSystem1.  # noqa: E501


        :return: The sponsor_role_ids of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._sponsor_role_ids

    @sponsor_role_ids.setter
    def sponsor_role_ids(self, sponsor_role_ids):
        """Sets the sponsor_role_ids of this FloodControlSystem1.


        :param sponsor_role_ids: The sponsor_role_ids of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._sponsor_role_ids = sponsor_role_ids

    @property
    def is_usace(self):
        """Gets the is_usace of this FloodControlSystem1.  # noqa: E501


        :return: The is_usace of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._is_usace

    @is_usace.setter
    def is_usace(self, is_usace):
        """Sets the is_usace of this FloodControlSystem1.


        :param is_usace: The is_usace of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._is_usace = is_usace

    @property
    def aiannh(self):
        """Gets the aiannh of this FloodControlSystem1.  # noqa: E501


        :return: The aiannh of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._aiannh

    @aiannh.setter
    def aiannh(self, aiannh):
        """Sets the aiannh of this FloodControlSystem1.


        :param aiannh: The aiannh of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._aiannh = aiannh

    @property
    def steward_org_names(self):
        """Gets the steward_org_names of this FloodControlSystem1.  # noqa: E501


        :return: The steward_org_names of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._steward_org_names

    @steward_org_names.setter
    def steward_org_names(self, steward_org_names):
        """Sets the steward_org_names of this FloodControlSystem1.


        :param steward_org_names: The steward_org_names of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._steward_org_names = steward_org_names

    @property
    def city_state(self):
        """Gets the city_state of this FloodControlSystem1.  # noqa: E501


        :return: The city_state of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._city_state

    @city_state.setter
    def city_state(self, city_state):
        """Sets the city_state of this FloodControlSystem1.


        :param city_state: The city_state of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._city_state = city_state

    @property
    def congdist(self):
        """Gets the congdist of this FloodControlSystem1.  # noqa: E501


        :return: The congdist of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._congdist

    @congdist.setter
    def congdist(self, congdist):
        """Sets the congdist of this FloodControlSystem1.


        :param congdist: The congdist of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._congdist = congdist

    @property
    def county_state(self):
        """Gets the county_state of this FloodControlSystem1.  # noqa: E501


        :return: The county_state of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._county_state

    @county_state.setter
    def county_state(self, county_state):
        """Sets the county_state of this FloodControlSystem1.


        :param county_state: The county_state of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._county_state = county_state

    @property
    def steward_org_ids(self):
        """Gets the steward_org_ids of this FloodControlSystem1.  # noqa: E501


        :return: The steward_org_ids of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._steward_org_ids

    @steward_org_ids.setter
    def steward_org_ids(self, steward_org_ids):
        """Sets the steward_org_ids of this FloodControlSystem1.


        :param steward_org_ids: The steward_org_ids of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._steward_org_ids = steward_org_ids

    @property
    def fema_community(self):
        """Gets the fema_community of this FloodControlSystem1.  # noqa: E501


        :return: The fema_community of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._fema_community

    @fema_community.setter
    def fema_community(self, fema_community):
        """Sets the fema_community of this FloodControlSystem1.


        :param fema_community: The fema_community of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._fema_community = fema_community

    @property
    def fema_region(self):
        """Gets the fema_region of this FloodControlSystem1.  # noqa: E501


        :return: The fema_region of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._fema_region

    @fema_region.setter
    def fema_region(self, fema_region):
        """Sets the fema_region of this FloodControlSystem1.


        :param fema_region: The fema_region of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._fema_region = fema_region

    @property
    def huc2(self):
        """Gets the huc2 of this FloodControlSystem1.  # noqa: E501


        :return: The huc2 of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._huc2

    @huc2.setter
    def huc2(self, huc2):
        """Sets the huc2 of this FloodControlSystem1.


        :param huc2: The huc2 of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._huc2 = huc2

    @property
    def huc4(self):
        """Gets the huc4 of this FloodControlSystem1.  # noqa: E501


        :return: The huc4 of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._huc4

    @huc4.setter
    def huc4(self, huc4):
        """Sets the huc4 of this FloodControlSystem1.


        :param huc4: The huc4 of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._huc4 = huc4

    @property
    def huc6(self):
        """Gets the huc6 of this FloodControlSystem1.  # noqa: E501


        :return: The huc6 of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._huc6

    @huc6.setter
    def huc6(self, huc6):
        """Sets the huc6 of this FloodControlSystem1.


        :param huc6: The huc6 of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._huc6 = huc6

    @property
    def huc8(self):
        """Gets the huc8 of this FloodControlSystem1.  # noqa: E501


        :return: The huc8 of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._huc8

    @huc8.setter
    def huc8(self, huc8):
        """Sets the huc8 of this FloodControlSystem1.


        :param huc8: The huc8 of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._huc8 = huc8

    @property
    def nation(self):
        """Gets the nation of this FloodControlSystem1.  # noqa: E501


        :return: The nation of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """Sets the nation of this FloodControlSystem1.


        :param nation: The nation of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._nation = nation

    @property
    def state(self):
        """Gets the state of this FloodControlSystem1.  # noqa: E501


        :return: The state of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FloodControlSystem1.


        :param state: The state of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._state = state

    @property
    def usace_district(self):
        """Gets the usace_district of this FloodControlSystem1.  # noqa: E501


        :return: The usace_district of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._usace_district

    @usace_district.setter
    def usace_district(self, usace_district):
        """Sets the usace_district of this FloodControlSystem1.


        :param usace_district: The usace_district of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._usace_district = usace_district

    @property
    def usace_division(self):
        """Gets the usace_division of this FloodControlSystem1.  # noqa: E501


        :return: The usace_division of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._usace_division

    @usace_division.setter
    def usace_division(self, usace_division):
        """Sets the usace_division of this FloodControlSystem1.


        :param usace_division: The usace_division of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._usace_division = usace_division

    @property
    def zipcode(self):
        """Gets the zipcode of this FloodControlSystem1.  # noqa: E501


        :return: The zipcode of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this FloodControlSystem1.


        :param zipcode: The zipcode of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._zipcode = zipcode

    @property
    def agency(self):
        """Gets the agency of this FloodControlSystem1.  # noqa: E501


        :return: The agency of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this FloodControlSystem1.


        :param agency: The agency of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._agency = agency

    @property
    def risk_action(self):
        """Gets the risk_action of this FloodControlSystem1.  # noqa: E501


        :return: The risk_action of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_action

    @risk_action.setter
    def risk_action(self, risk_action):
        """Sets the risk_action of this FloodControlSystem1.


        :param risk_action: The risk_action of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_action is not None and len(risk_action) > 4000):
            raise ValueError("Invalid value for `risk_action`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_action = risk_action

    @property
    def risk_coordination(self):
        """Gets the risk_coordination of this FloodControlSystem1.  # noqa: E501


        :return: The risk_coordination of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_coordination

    @risk_coordination.setter
    def risk_coordination(self, risk_coordination):
        """Sets the risk_coordination of this FloodControlSystem1.


        :param risk_coordination: The risk_coordination of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_coordination is not None and len(risk_coordination) > 4000):
            raise ValueError("Invalid value for `risk_coordination`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_coordination = risk_coordination

    @property
    def risk_om_action(self):
        """Gets the risk_om_action of this FloodControlSystem1.  # noqa: E501


        :return: The risk_om_action of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_om_action

    @risk_om_action.setter
    def risk_om_action(self, risk_om_action):
        """Sets the risk_om_action of this FloodControlSystem1.


        :param risk_om_action: The risk_om_action of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_om_action is not None and len(risk_om_action) > 4000):
            raise ValueError("Invalid value for `risk_om_action`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_om_action = risk_om_action

    @property
    def risk_improvements(self):
        """Gets the risk_improvements of this FloodControlSystem1.  # noqa: E501


        :return: The risk_improvements of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_improvements

    @risk_improvements.setter
    def risk_improvements(self, risk_improvements):
        """Sets the risk_improvements of this FloodControlSystem1.


        :param risk_improvements: The risk_improvements of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_improvements is not None and len(risk_improvements) > 4000):
            raise ValueError("Invalid value for `risk_improvements`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_improvements = risk_improvements

    @property
    def risk_actions_unfinished(self):
        """Gets the risk_actions_unfinished of this FloodControlSystem1.  # noqa: E501


        :return: The risk_actions_unfinished of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_actions_unfinished

    @risk_actions_unfinished.setter
    def risk_actions_unfinished(self, risk_actions_unfinished):
        """Sets the risk_actions_unfinished of this FloodControlSystem1.


        :param risk_actions_unfinished: The risk_actions_unfinished of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_actions_unfinished is not None and len(risk_actions_unfinished) > 4000):
            raise ValueError("Invalid value for `risk_actions_unfinished`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_actions_unfinished = risk_actions_unfinished

    @property
    def risk_other_taken(self):
        """Gets the risk_other_taken of this FloodControlSystem1.  # noqa: E501


        :return: The risk_other_taken of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_other_taken

    @risk_other_taken.setter
    def risk_other_taken(self, risk_other_taken):
        """Sets the risk_other_taken of this FloodControlSystem1.


        :param risk_other_taken: The risk_other_taken of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_other_taken is not None and len(risk_other_taken) > 4000):
            raise ValueError("Invalid value for `risk_other_taken`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_other_taken = risk_other_taken

    @property
    def risk_rms_actions(self):
        """Gets the risk_rms_actions of this FloodControlSystem1.  # noqa: E501


        :return: The risk_rms_actions of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_rms_actions

    @risk_rms_actions.setter
    def risk_rms_actions(self, risk_rms_actions):
        """Sets the risk_rms_actions of this FloodControlSystem1.


        :param risk_rms_actions: The risk_rms_actions of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_rms_actions is not None and len(risk_rms_actions) > 4000):
            raise ValueError("Invalid value for `risk_rms_actions`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_rms_actions = risk_rms_actions

    @property
    def risk_performance(self):
        """Gets the risk_performance of this FloodControlSystem1.  # noqa: E501


        :return: The risk_performance of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_performance

    @risk_performance.setter
    def risk_performance(self, risk_performance):
        """Sets the risk_performance of this FloodControlSystem1.


        :param risk_performance: The risk_performance of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_performance is not None and len(risk_performance) > 4000):
            raise ValueError("Invalid value for `risk_performance`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_performance = risk_performance

    @property
    def risk_conditions(self):
        """Gets the risk_conditions of this FloodControlSystem1.  # noqa: E501


        :return: The risk_conditions of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_conditions

    @risk_conditions.setter
    def risk_conditions(self, risk_conditions):
        """Sets the risk_conditions of this FloodControlSystem1.


        :param risk_conditions: The risk_conditions of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_conditions is not None and len(risk_conditions) > 4000):
            raise ValueError("Invalid value for `risk_conditions`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_conditions = risk_conditions

    @property
    def risk_factors_changes(self):
        """Gets the risk_factors_changes of this FloodControlSystem1.  # noqa: E501


        :return: The risk_factors_changes of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_factors_changes

    @risk_factors_changes.setter
    def risk_factors_changes(self, risk_factors_changes):
        """Sets the risk_factors_changes of this FloodControlSystem1.


        :param risk_factors_changes: The risk_factors_changes of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_factors_changes is not None and len(risk_factors_changes) > 4000):
            raise ValueError("Invalid value for `risk_factors_changes`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_factors_changes = risk_factors_changes

    @property
    def risk_new_factors(self):
        """Gets the risk_new_factors of this FloodControlSystem1.  # noqa: E501


        :return: The risk_new_factors of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_new_factors

    @risk_new_factors.setter
    def risk_new_factors(self, risk_new_factors):
        """Sets the risk_new_factors of this FloodControlSystem1.


        :param risk_new_factors: The risk_new_factors of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_new_factors is not None and len(risk_new_factors) > 4000):
            raise ValueError("Invalid value for `risk_new_factors`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_new_factors = risk_new_factors

    @property
    def risk_others_change(self):
        """Gets the risk_others_change of this FloodControlSystem1.  # noqa: E501


        :return: The risk_others_change of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._risk_others_change

    @risk_others_change.setter
    def risk_others_change(self, risk_others_change):
        """Sets the risk_others_change of this FloodControlSystem1.


        :param risk_others_change: The risk_others_change of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                risk_others_change is not None and len(risk_others_change) > 4000):
            raise ValueError("Invalid value for `risk_others_change`, length must be less than or equal to `4000`")  # noqa: E501

        self._risk_others_change = risk_others_change

    @property
    def uncertainty_source(self):
        """Gets the uncertainty_source of this FloodControlSystem1.  # noqa: E501


        :return: The uncertainty_source of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_source

    @uncertainty_source.setter
    def uncertainty_source(self, uncertainty_source):
        """Sets the uncertainty_source of this FloodControlSystem1.


        :param uncertainty_source: The uncertainty_source of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uncertainty_source is not None and len(uncertainty_source) > 4000):
            raise ValueError("Invalid value for `uncertainty_source`, length must be less than or equal to `4000`")  # noqa: E501

        self._uncertainty_source = uncertainty_source

    @property
    def uncertainty_description(self):
        """Gets the uncertainty_description of this FloodControlSystem1.  # noqa: E501


        :return: The uncertainty_description of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_description

    @uncertainty_description.setter
    def uncertainty_description(self, uncertainty_description):
        """Sets the uncertainty_description of this FloodControlSystem1.


        :param uncertainty_description: The uncertainty_description of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                uncertainty_description is not None and len(uncertainty_description) > 4000):
            raise ValueError("Invalid value for `uncertainty_description`, length must be less than or equal to `4000`")  # noqa: E501

        self._uncertainty_description = uncertainty_description

    @property
    def fema_info(self):
        """Gets the fema_info of this FloodControlSystem1.  # noqa: E501


        :return: The fema_info of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._fema_info

    @fema_info.setter
    def fema_info(self, fema_info):
        """Sets the fema_info of this FloodControlSystem1.


        :param fema_info: The fema_info of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                fema_info is not None and len(fema_info) > 4000):
            raise ValueError("Invalid value for `fema_info`, length must be less than or equal to `4000`")  # noqa: E501

        self._fema_info = fema_info

    @property
    def portfolio(self):
        """Gets the portfolio of this FloodControlSystem1.  # noqa: E501


        :return: The portfolio of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this FloodControlSystem1.


        :param portfolio: The portfolio of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._portfolio = portfolio

    @property
    def location(self):
        """Gets the location of this FloodControlSystem1.  # noqa: E501


        :return: The location of this FloodControlSystem1.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FloodControlSystem1.


        :param location: The location of this FloodControlSystem1.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                location is not None and len(location) > 4000):
            raise ValueError("Invalid value for `location`, length must be less than or equal to `4000`")  # noqa: E501

        self._location = location

    @property
    def interested_agency_ids(self):
        """Gets the interested_agency_ids of this FloodControlSystem1.  # noqa: E501


        :return: The interested_agency_ids of this FloodControlSystem1.  # noqa: E501
        :rtype: list[str]
        """
        return self._interested_agency_ids

    @interested_agency_ids.setter
    def interested_agency_ids(self, interested_agency_ids):
        """Sets the interested_agency_ids of this FloodControlSystem1.


        :param interested_agency_ids: The interested_agency_ids of this FloodControlSystem1.  # noqa: E501
        :type: list[str]
        """

        self._interested_agency_ids = interested_agency_ids

    @property
    def evacuation_plan_id(self):
        """Gets the evacuation_plan_id of this FloodControlSystem1.  # noqa: E501


        :return: The evacuation_plan_id of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._evacuation_plan_id

    @evacuation_plan_id.setter
    def evacuation_plan_id(self, evacuation_plan_id):
        """Sets the evacuation_plan_id of this FloodControlSystem1.


        :param evacuation_plan_id: The evacuation_plan_id of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._evacuation_plan_id = evacuation_plan_id

    @property
    def purpose_ids(self):
        """Gets the purpose_ids of this FloodControlSystem1.  # noqa: E501


        :return: The purpose_ids of this FloodControlSystem1.  # noqa: E501
        :rtype: list[int]
        """
        return self._purpose_ids

    @purpose_ids.setter
    def purpose_ids(self, purpose_ids):
        """Sets the purpose_ids of this FloodControlSystem1.


        :param purpose_ids: The purpose_ids of this FloodControlSystem1.  # noqa: E501
        :type: list[int]
        """

        self._purpose_ids = purpose_ids

    @property
    def primary_purpose_id(self):
        """Gets the primary_purpose_id of this FloodControlSystem1.  # noqa: E501


        :return: The primary_purpose_id of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._primary_purpose_id

    @primary_purpose_id.setter
    def primary_purpose_id(self, primary_purpose_id):
        """Sets the primary_purpose_id of this FloodControlSystem1.


        :param primary_purpose_id: The primary_purpose_id of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._primary_purpose_id = primary_purpose_id

    @property
    def authorization_category_id(self):
        """Gets the authorization_category_id of this FloodControlSystem1.  # noqa: E501


        :return: The authorization_category_id of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._authorization_category_id

    @authorization_category_id.setter
    def authorization_category_id(self, authorization_category_id):
        """Sets the authorization_category_id of this FloodControlSystem1.


        :param authorization_category_id: The authorization_category_id of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._authorization_category_id = authorization_category_id

    @property
    def swif_id(self):
        """Gets the swif_id of this FloodControlSystem1.  # noqa: E501


        :return: The swif_id of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._swif_id

    @swif_id.setter
    def swif_id(self, swif_id):
        """Sets the swif_id of this FloodControlSystem1.


        :param swif_id: The swif_id of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._swif_id = swif_id

    @property
    def levee_reviewed_id(self):
        """Gets the levee_reviewed_id of this FloodControlSystem1.  # noqa: E501


        :return: The levee_reviewed_id of this FloodControlSystem1.  # noqa: E501
        :rtype: int
        """
        return self._levee_reviewed_id

    @levee_reviewed_id.setter
    def levee_reviewed_id(self, levee_reviewed_id):
        """Sets the levee_reviewed_id of this FloodControlSystem1.


        :param levee_reviewed_id: The levee_reviewed_id of this FloodControlSystem1.  # noqa: E501
        :type: int
        """

        self._levee_reviewed_id = levee_reviewed_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FloodControlSystem1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FloodControlSystem1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FloodControlSystem1):
            return True

        return self.to_dict() != other.to_dict()
