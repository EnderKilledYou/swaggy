# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dam_system': 'list[str]',
        'channel_system': 'list[str]',
        'canal_system': 'list[str]',
        'under_review': 'list[str]',
        'levee_system': 'list[str]'
    }

    attribute_map = {
        'dam_system': 'Dam System',
        'channel_system': 'Channel System',
        'canal_system': 'Canal System',
        'under_review': 'Under Review',
        'levee_system': 'Levee System'
    }

    def __init__(self, dam_system=None, channel_system=None, canal_system=None, under_review=None, levee_system=None, _configuration=None):  # noqa: E501
        """SystemType - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dam_system = None
        self._channel_system = None
        self._canal_system = None
        self._under_review = None
        self._levee_system = None
        self.discriminator = None

        if dam_system is not None:
            self.dam_system = dam_system
        if channel_system is not None:
            self.channel_system = channel_system
        if canal_system is not None:
            self.canal_system = canal_system
        if under_review is not None:
            self.under_review = under_review
        if levee_system is not None:
            self.levee_system = levee_system

    @property
    def dam_system(self):
        """Gets the dam_system of this SystemType.  # noqa: E501


        :return: The dam_system of this SystemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._dam_system

    @dam_system.setter
    def dam_system(self, dam_system):
        """Sets the dam_system of this SystemType.


        :param dam_system: The dam_system of this SystemType.  # noqa: E501
        :type: list[str]
        """

        self._dam_system = dam_system

    @property
    def channel_system(self):
        """Gets the channel_system of this SystemType.  # noqa: E501


        :return: The channel_system of this SystemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._channel_system

    @channel_system.setter
    def channel_system(self, channel_system):
        """Sets the channel_system of this SystemType.


        :param channel_system: The channel_system of this SystemType.  # noqa: E501
        :type: list[str]
        """

        self._channel_system = channel_system

    @property
    def canal_system(self):
        """Gets the canal_system of this SystemType.  # noqa: E501


        :return: The canal_system of this SystemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._canal_system

    @canal_system.setter
    def canal_system(self, canal_system):
        """Sets the canal_system of this SystemType.


        :param canal_system: The canal_system of this SystemType.  # noqa: E501
        :type: list[str]
        """

        self._canal_system = canal_system

    @property
    def under_review(self):
        """Gets the under_review of this SystemType.  # noqa: E501


        :return: The under_review of this SystemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this SystemType.


        :param under_review: The under_review of this SystemType.  # noqa: E501
        :type: list[str]
        """

        self._under_review = under_review

    @property
    def levee_system(self):
        """Gets the levee_system of this SystemType.  # noqa: E501


        :return: The levee_system of this SystemType.  # noqa: E501
        :rtype: list[str]
        """
        return self._levee_system

    @levee_system.setter
    def levee_system(self, levee_system):
        """Sets the levee_system of this SystemType.


        :param levee_system: The levee_system of this SystemType.  # noqa: E501
        :type: list[str]
        """

        self._levee_system = levee_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemType):
            return True

        return self.to_dict() != other.to_dict()
