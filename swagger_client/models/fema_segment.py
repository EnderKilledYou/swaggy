# coding: utf-8

"""
    NLD2 API

    The <b>NLD2 API</b> is a complete, programmable interface to all National Levee Database functionality. The NLD2 API is a RESTful web service, using standard technologies like HTTP verbs, headers, and status codes.<br/><br/>The <a href=\"/#/\" target=\"_blank\">National Levee Database website</a> is built on this API, and all of its services are available for integration into your application. To get started, we recommend exploring the website to learn about the functionality that is available and then using the OpenAPI specification below to try connecting to the test/hello endpoint.<br/><br/>Currently, you can develop your application with the public API. For more advanced features, you may need an NLD account and specific government clearance, depending on the nature of the data. If you need assistance, please email us at <a href=\"mailto:NLD@usace.army.mil\">NLD@usace.army.mil</a> or call us at <a href=\"tel:18775383387\">1-877-LEVEEUS</a> (1-877-538-3387).  # noqa: E501

    OpenAPI spec version: 3.26.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FemaSegment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'pal_status_name': 'str',
        'pal_status_description': 'str',
        'potential_hazard_name': 'str',
        'potential_hazard_description': 'str',
        'pal_agree_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'pal_status_name': 'palStatusName',
        'pal_status_description': 'palStatusDescription',
        'potential_hazard_name': 'potentialHazardName',
        'potential_hazard_description': 'potentialHazardDescription',
        'pal_agree_date': 'palAgreeDate'
    }

    def __init__(self, id=None, name=None, pal_status_name=None, pal_status_description=None, potential_hazard_name=None, potential_hazard_description=None, pal_agree_date=None, _configuration=None):  # noqa: E501
        """FemaSegment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._pal_status_name = None
        self._pal_status_description = None
        self._potential_hazard_name = None
        self._potential_hazard_description = None
        self._pal_agree_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if pal_status_name is not None:
            self.pal_status_name = pal_status_name
        if pal_status_description is not None:
            self.pal_status_description = pal_status_description
        if potential_hazard_name is not None:
            self.potential_hazard_name = potential_hazard_name
        if potential_hazard_description is not None:
            self.potential_hazard_description = potential_hazard_description
        if pal_agree_date is not None:
            self.pal_agree_date = pal_agree_date

    @property
    def id(self):
        """Gets the id of this FemaSegment.  # noqa: E501


        :return: The id of this FemaSegment.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FemaSegment.


        :param id: The id of this FemaSegment.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FemaSegment.  # noqa: E501


        :return: The name of this FemaSegment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FemaSegment.


        :param name: The name of this FemaSegment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pal_status_name(self):
        """Gets the pal_status_name of this FemaSegment.  # noqa: E501


        :return: The pal_status_name of this FemaSegment.  # noqa: E501
        :rtype: str
        """
        return self._pal_status_name

    @pal_status_name.setter
    def pal_status_name(self, pal_status_name):
        """Sets the pal_status_name of this FemaSegment.


        :param pal_status_name: The pal_status_name of this FemaSegment.  # noqa: E501
        :type: str
        """

        self._pal_status_name = pal_status_name

    @property
    def pal_status_description(self):
        """Gets the pal_status_description of this FemaSegment.  # noqa: E501


        :return: The pal_status_description of this FemaSegment.  # noqa: E501
        :rtype: str
        """
        return self._pal_status_description

    @pal_status_description.setter
    def pal_status_description(self, pal_status_description):
        """Sets the pal_status_description of this FemaSegment.


        :param pal_status_description: The pal_status_description of this FemaSegment.  # noqa: E501
        :type: str
        """

        self._pal_status_description = pal_status_description

    @property
    def potential_hazard_name(self):
        """Gets the potential_hazard_name of this FemaSegment.  # noqa: E501


        :return: The potential_hazard_name of this FemaSegment.  # noqa: E501
        :rtype: str
        """
        return self._potential_hazard_name

    @potential_hazard_name.setter
    def potential_hazard_name(self, potential_hazard_name):
        """Sets the potential_hazard_name of this FemaSegment.


        :param potential_hazard_name: The potential_hazard_name of this FemaSegment.  # noqa: E501
        :type: str
        """

        self._potential_hazard_name = potential_hazard_name

    @property
    def potential_hazard_description(self):
        """Gets the potential_hazard_description of this FemaSegment.  # noqa: E501


        :return: The potential_hazard_description of this FemaSegment.  # noqa: E501
        :rtype: str
        """
        return self._potential_hazard_description

    @potential_hazard_description.setter
    def potential_hazard_description(self, potential_hazard_description):
        """Sets the potential_hazard_description of this FemaSegment.


        :param potential_hazard_description: The potential_hazard_description of this FemaSegment.  # noqa: E501
        :type: str
        """

        self._potential_hazard_description = potential_hazard_description

    @property
    def pal_agree_date(self):
        """Gets the pal_agree_date of this FemaSegment.  # noqa: E501


        :return: The pal_agree_date of this FemaSegment.  # noqa: E501
        :rtype: datetime
        """
        return self._pal_agree_date

    @pal_agree_date.setter
    def pal_agree_date(self, pal_agree_date):
        """Sets the pal_agree_date of this FemaSegment.


        :param pal_agree_date: The pal_agree_date of this FemaSegment.  # noqa: E501
        :type: datetime
        """

        self._pal_agree_date = pal_agree_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FemaSegment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FemaSegment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FemaSegment):
            return True

        return self.to_dict() != other.to_dict()
